(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    236328,       4914]
NotebookOptionsPosition[    230502,       4737]
NotebookOutlinePosition[    231120,       4759]
CellTagsIndexPosition[    231077,       4756]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 "As an undergraduate, our math department used ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " heavily for instruction in a number of classes. Initially, I found it \
perplexing and frustrating. While most of my peers remained in that state \
(and never used it again after those classes), I soon found myself ordering \
and reading ",
 ButtonBox["An Introduction to Programming with ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.amazon.com/Introduction-Programming-Mathematica-Paul-\
Wellin/dp/0521846781/ref=sr_1_4?ie=UTF8&qid=1328824356&sr=8-4"], None},
  ButtonNote->
   "http://www.amazon.com/Introduction-Programming-Mathematica-Paul-Wellin/dp/\
0521846781/ref=sr_1_4?ie=UTF8&qid=1328824356&sr=8-4"],
 StyleBox[ButtonBox["Mathematica",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.amazon.com/Introduction-Programming-Mathematica-Paul-\
Wellin/dp/0521846781/ref=sr_1_4?ie=UTF8&qid=1328824356&sr=8-4"], None},
  ButtonNote->
   "http://www.amazon.com/Introduction-Programming-Mathematica-Paul-Wellin/dp/\
0521846781/ref=sr_1_4?ie=UTF8&qid=1328824356&sr=8-4"],
  FontSlant->"Italic"],
 ". "
}], "Text",
 CellChangeTimes->{{3.537812938842278*^9, 3.537813044750391*^9}, {
   3.537813107990123*^9, 3.5378131933313503`*^9}, 3.5378153995976343`*^9, 
   3.537875800987474*^9, 3.537876699292479*^9}],

Cell[TextData[{
 "Seven years later, I find myself using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " almost daily. As a student, it is one of the most helpful tools at my \
disposal, and it has saved me countless hours of tedious computation by hand. \
I\[CloseCurlyQuote]m not sure I can express all the ways in which I \
appreciate it, but I hope to share some."
}], "Text",
 CellChangeTimes->{{3.5378132364623117`*^9, 3.5378132555856037`*^9}, {
   3.537813316985506*^9, 3.537813417854343*^9}, 3.537815399609088*^9, {
   3.5378736587289467`*^9, 3.537873720877551*^9}, 3.537875800989603*^9, 
   3.537876699295027*^9}],

Cell[TextData[{
 "I admit that I primarily use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as a glorified calculuator. Most of my code is single use code to help me \
with a homework assignment. I have written some longer code for class \
projects, but rarely more than a few hundred lines. However, for the work \
that I have had over the past seven years, it is exactly the right tool, and \
I don\[CloseCurlyQuote]t know of any other language which comprehensively \
offers all the features I need within it\[CloseCurlyQuote]s core language."
}], "Text",
 CellChangeTimes->{{3.537873193279894*^9, 3.537873440634832*^9}, 
   3.5378758009896793`*^9, 3.5378766992951107`*^9}],

Cell[TextData[{
 "One other note to the Redditors and cynics (but I repeat myself): I'm not \
recommending or encouraging programmers to jump ship from their go-to \
languages to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". I\[CloseCurlyQuote]m not suggesting that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " doesn\[CloseCurlyQuote]t have any shortcomings. I\[CloseCurlyQuote]m not \
arguing that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is good for everything. I\[CloseCurlyQuote]m well aware that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is an expensive, closed platform. I\[CloseCurlyQuote]m well aware that \
Mathematic has the worst undo ever. I\[CloseCurlyQuote]m not writing an \
advertisement or getting paid by Wolfram. I\[CloseCurlyQuote]m simply shared \
the story of a program that has become an invaluable part of my schooling. "
}], "Text",
 CellChangeTimes->{{3.537873193279894*^9, 3.537873337756654*^9}, {
   3.537873460948077*^9, 3.537873619447194*^9}, 3.537875800989826*^9, 
   3.537876699295175*^9}],

Cell[CellGroupData[{

Cell["\<\
1. Powerful Symbolic Computations\
\>", "Section",
 CellChangeTimes->{
  3.5378157568237*^9, {3.5378158629434547`*^9, 3.537815920818612*^9}, 
   3.537875800989954*^9, 3.5378766992952747`*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 "Perhaps the thing ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is most well known for is symbolic computations. The oldest ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " file I have on my computer is a single line of code that I apparently used \
on a differential equations quiz in 2005. In it, I did a partial fraction \
decomposion: the bane of calculus 2 students, but easy for a computer."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.537813463821192*^9, 3.5378134639729424`*^9}, {
   3.537813496444479*^9, 3.5378135098443823`*^9}, {3.537813626859777*^9, 
   3.537813681753344*^9}, 3.537813775480775*^9, {3.537813874295061*^9, 
   3.537813925148016*^9}, 3.5378153996127577`*^9, 3.537815748181831*^9, 
   3.537875800990921*^9, 3.537876699296978*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Apart", "[", 
   FractionBox["1", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"x", "+", "2"}], ")"}], "2"], 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", "1"}], ")"}]}]], "]"}], "//", 
  "Expand"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.537813611966893*^9, 3.537813616436013*^9}, {
   3.537813894988515*^9, 3.537813907830504*^9}, 3.537815399613261*^9, 
   3.537815748182047*^9, 3.537875800991355*^9, 3.537876699297587*^9}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", 
   RowBox[{"5", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"2", "+", "x"}], ")"}], "2"]}]], "+", 
  FractionBox["4", 
   RowBox[{"25", " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", "x"}], ")"}]}]], "+", 
  FractionBox["3", 
   RowBox[{"25", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      SuperscriptBox["x", "2"]}], ")"}]}]], "-", 
  FractionBox[
   RowBox[{"4", " ", "x"}], 
   RowBox[{"25", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      SuperscriptBox["x", "2"]}], ")"}]}]]}]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.537813730533901*^9, 3.5378139084048023`*^9, 
  3.537815399614819*^9, 3.53781574818227*^9, 3.5378758009941196`*^9, 
  3.537876699301299*^9}],

Cell[TextData[{
 "One of the benefits of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", is the elegance of typesetting in both the input and the output. Wolfram \
has taken great care to make ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " an aesthetically excellent experience, and I\[CloseCurlyQuote]m grateful \
for that."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.5378139295332327`*^9, 3.537813932003384*^9}, {
   3.537813969890862*^9, 3.5378140313645887`*^9}, {3.537814083144898*^9, 
   3.537814106448992*^9}, {3.537814147585259*^9, 3.5378141475901814`*^9}, 
   3.53781539961618*^9, 3.537815748182467*^9, 3.537875800994893*^9, 
   3.537876699302388*^9}],

Cell["\<\
These days, I avoid doing algebraic manipulations by hand at all costs. It\
\[CloseCurlyQuote]s not worth it to me to risk making errors that might \
trickle down into my work. I let computers handle such things for me. Thus, \
when I\[CloseCurlyQuote]m doing homework, I usually have a notebook open \
filled with one-off expressions like\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.537814147966804*^9, 3.537814215165539*^9}, {
   3.537814285348714*^9, 3.537814307700536*^9}, 3.537815399616314*^9, 
   3.5378157481826363`*^9, 3.537875800995503*^9, 3.537876699302497*^9}],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"20", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"3", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "-", "p"}], ")"}], "4"], " ", 
        SuperscriptBox["p", "2"]}], "-", 
       RowBox[{"3", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "-", "p"}], ")"}], "2"], " ", 
        SuperscriptBox["p", "4"]}]}], ")"}]}], "\[Equal]", "0"}], ",", "p"}], 
  "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.491580011902742*^9, 3.491580014857239*^9}, 
   3.5378153996171017`*^9, 3.537815748182818*^9, 3.537875800995976*^9, 
   3.537876699302947*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     FractionBox["1", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", "1"}], "}"}]}], "}"}]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.5378142166757317`*^9, 3.5378153996175747`*^9, 
  3.537815748183015*^9, 3.53787580099632*^9, 3.537876699303336*^9}],

Cell["\<\
Of course, it can solve much harder problems too. Integration is no problem. \
Here\[CloseCurlyQuote]s a triple integral I solved in my eletricity and \
magnetism class sophomore year. (I wish I remember what it all means.)\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.537814667909935*^9, 3.5378147010033216`*^9}, {
   3.537814927952999*^9, 3.537814949846121*^9}, 3.537815399617711*^9, 
   3.5378157481831427`*^9, 3.537875800996398*^9, 3.537876699303425*^9}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{
     FractionBox[
      SuperscriptBox["q", "2"], 
      SuperscriptBox["r", "4"]], 
     SuperscriptBox["r", "2"], 
     RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"r", ",", "R", ",", "a"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\[Theta]", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\[Phi]", ",", "0", ",", 
      RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.537814890765644*^9, 3.5378149146349163`*^9}, 
   3.53781500277496*^9, 3.5378153996186028`*^9, 3.5378157481832943`*^9, 
   3.537875800996757*^9, 3.537876699303833*^9}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{"4", " ", "\[Pi]", " ", 
    SuperscriptBox["q", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "a"]}], "+", 
      FractionBox["1", "R"]}], ")"}]}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"a", " ", "R"}], "\[NotEqual]", 
       SuperscriptBox["R", "2"]}], "&&", 
      RowBox[{
       RowBox[{"Re", "[", 
        FractionBox["R", 
         RowBox[{"a", "-", "R"}]], "]"}], "\[GreaterEqual]", "0"}]}], ")"}], "||", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox["R", 
       RowBox[{"a", "-", "R"}]], "]"}], "\[LessEqual]", 
     RowBox[{"-", "1"}]}], "||", 
    RowBox[{
     FractionBox["R", 
      RowBox[{"a", "-", "R"}]], "\[NotElement]", "Reals"}]}]}], 
  "]"}]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.537814922446768*^9, 3.537815399703423*^9, 
  3.537815748183433*^9, 3.537875800997385*^9, 3.5378766993045177`*^9}],

Cell[TextData[{
 "The output is messy because ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " tried to solve the integral as generally as possible. We can get a more \
clear answer by clarifying some assumptions we\[CloseCurlyQuote]re making \
about the parameters."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.537814955269619*^9, 3.537815000053184*^9}, {
   3.537815114274992*^9, 3.537815140338278*^9}, 3.5378153997039967`*^9, 
   3.537815748183573*^9, 3.537875800997458*^9, 3.5378766993046017`*^9}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"Assuming", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"a", ">", "R"}], "&&", 
     RowBox[{"R", ">", "0"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{
       FractionBox[
        SuperscriptBox["q", "2"], 
        SuperscriptBox["r", "4"]], 
       SuperscriptBox["r", "2"], 
       RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"r", ",", "R", ",", "a"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Theta]", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Phi]", ",", "0", ",", 
        RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.537814890765644*^9, 3.5378149146349163`*^9}, {
   3.53781500277496*^9, 3.537815019896029*^9}, {3.537815055592412*^9, 
   3.537815103496749*^9}, 3.537815399709344*^9, 3.537815748183702*^9, 
   3.537875800997867*^9, 3.537876582450727*^9, 3.537876699305038*^9}],

Cell[BoxData[
 RowBox[{"4", " ", "\[Pi]", " ", 
  SuperscriptBox["q", "2"], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["1", "a"]}], "+", 
    FractionBox["1", "R"]}], ")"}]}]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.53781506131409*^9, 3.537815104491963*^9}, 
   3.5378153997101727`*^9, 3.537815748183818*^9, 3.537875800998232*^9, 
   3.537876699305399*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2. Functional Programming", "Section",
 CellChangeTimes->{{3.537815917011636*^9, 3.537815953840859*^9}, 
   3.537875800998331*^9, 3.537876699305476*^9}],

Cell[TextData[{
 "Like R, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " allows procedural programming. "
}], "Text",
 CellChangeTimes->{{3.537816155072813*^9, 3.537816166762165*^9}, 
   3.5378758009984007`*^9, 3.5378766993055468`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"x", "=", "0"}], ",", 
   RowBox[{"x", "\[LessEqual]", "1"}], ",", 
   RowBox[{"x", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Print", "[", "x", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input",\

 CellChangeTimes->{{3.53781618251991*^9, 3.5378161934937763`*^9}, 
   3.537866822262817*^9, 3.5378758009986277`*^9, 3.537876699305767*^9}],

Cell[CellGroupData[{

Cell[BoxData["0"], "Print",
 CellChangeTimes->{3.537816194569893*^9, 3.537866822593913*^9, 
  3.5378758009988213`*^9, 3.537876699305958*^9}],

Cell[BoxData["1"], "Print",
 CellChangeTimes->{3.537816194569893*^9, 3.53786682260183*^9, 
  3.537875801000228*^9, 3.537876699307695*^9}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "However, again like R, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is really built for functional programming. ",
 ButtonBox["Wolfram has a great tutoral on the topic, but let me share a \
brief example from my own use. ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/tutorial/\
FunctionalOperationsOverview.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/tutorial/\
FunctionalOperationsOverview.html"]
}], "Text",
 CellChangeTimes->{{3.5378671096071653`*^9, 3.5378671323513327`*^9}, {
   3.537867167018318*^9, 3.537867174702854*^9}, {3.537867254409313*^9, 
   3.537867273044856*^9}, {3.5378673816200047`*^9, 3.5378674921962223`*^9}, {
   3.5378683434942904`*^9, 3.537868366481848*^9}, 3.537875801000309*^9, 
   3.5378766993078012`*^9}],

Cell[TextData[{
 "On a homework assignment this week, I wanted to measure the total tardiness \
for various schedules in a single machine problem. Each of the four jobs had \
a total processing time, given by ",
 StyleBox["{2,4,6,8}", "Input"],
 ", and a due date ",
 StyleBox["{4,14,10,16}", "Input"],
 ". The tardiness of a job for a given schedule (i.e. ordering of the jobs) \
is 0 if the job is completed on time and how late it is otherwise. First I \
set processing time and due dates for the four jobs:\.08\.08"
}], "Text",
 CellChangeTimes->{{3.5378671096071653`*^9, 3.5378671323513327`*^9}, {
   3.537867167018318*^9, 3.537867174702854*^9}, {3.537867254409313*^9, 
   3.537867273044856*^9}, {3.5378673816200047`*^9, 3.53786761339751*^9}, {
   3.537867695156238*^9, 3.537867706418077*^9}, {3.537873953692864*^9, 
   3.5378739686084137`*^9}, 3.537875801000379*^9, 3.537876699308003*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"p", "=", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"d", "=", 
   RowBox[{"{", 
    RowBox[{"4", ",", "14", ",", "10", ",", "16"}], "}"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.5375466678193283`*^9, 3.537546696429311*^9}, 
   3.537875801000614*^9, 3.5378766993084106`*^9}],

Cell[TextData[{
 "Any permutation of the job indices ",
 StyleBox["{1,2,3,4}", "Input"],
 " gives a valid schedule. Suppose we want to know the total lateness of the \
schedule ",
 StyleBox["x={1,4,3,2}", "Input"],
 ". The ordering of processing times is given by ",
 StyleBox["p\[LeftDoubleBracket]x\[RightDoubleBracket]", "Input"],
 " so the time when each job is completed is a running total of the \
processing times: "
}], "Text",
 CellChangeTimes->{{3.5378676570639267`*^9, 3.537867868391946*^9}, 
   3.537875801000702*^9, 3.537876699308539*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Accumulate", "[", 
  RowBox[{"p", "\[LeftDoubleBracket]", 
   StyleBox[
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "Input"], 
   "\[RightDoubleBracket]"}], "]"}]], "Input",
 CellChangeTimes->{{3.53786787921025*^9, 3.537867895456463*^9}, 
   3.5378758010010223`*^9, 3.5378766993090363`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "10", ",", "16", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{{3.537867886379504*^9, 3.5378678956909723`*^9}, 
   3.537875801001219*^9, 3.53787669930937*^9}]
}, Open  ]],

Cell["\<\
The lateness of each job is defined by the completion time minus the due date:\
\>", "Text",
 CellChangeTimes->{{3.537867904471612*^9, 3.537867945945423*^9}, 
   3.537875801001293*^9, 3.5378766993094873`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Accumulate", "[", 
   RowBox[{"p", "\[LeftDoubleBracket]", 
    StyleBox[
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "Input"], 
    "\[RightDoubleBracket]"}], "]"}], "-", 
  RowBox[{
  "d", "\[LeftDoubleBracket]", "x", "\[RightDoubleBracket]"}]}]], "Input",
 CellChangeTimes->{{3.53786787921025*^9, 3.537867895456463*^9}, {
   3.537867952457747*^9, 3.537867954016097*^9}, 3.537875801001569*^9, 
   3.5378766993100243`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "12"}], ",", 
   RowBox[{"-", "4"}], ",", "2", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{3.537867954406787*^9, 3.5378758010017557`*^9, 
  3.537876699310396*^9}]
}, Open  ]],

Cell["\<\
To get the tardiness, we want the max of the lateness and zero. There are a \
number of ways to do this, but one is to apply a max function to each element \
of the list:\
\>", "Text",
 CellChangeTimes->{{3.53786796783482*^9, 3.5378679962771*^9}, 
   3.53787580100182*^9, 3.537876699310575*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Max", "[", 
     RowBox[{"#", ",", "0"}], "]"}], "&"}], ",", 
   RowBox[{
    RowBox[{"Accumulate", "[", 
     RowBox[{"p", "\[LeftDoubleBracket]", 
      StyleBox[
       RowBox[{"{", 
        RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "Input"], 
      "\[RightDoubleBracket]"}], "]"}], "-", 
    RowBox[{"d", "\[LeftDoubleBracket]", "x", "\[RightDoubleBracket]"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5378680070155287`*^9, 3.537868028205793*^9}, 
   3.537875801002122*^9, 3.537876699311225*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "2", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{{3.537868022042432*^9, 3.537868028507176*^9}, 
   3.537875801002303*^9, 3.537876699311635*^9}]
}, Open  ]],

Cell[TextData[{
 "(The ",
 Cell[BoxData[
  FormBox["#", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox["&", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " are part of Mathematica\[CloseCurlyQuote]s notation for ",
 ButtonBox["pure functions",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/tutorial/PureFunctions.\
html"], None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/tutorial/PureFunctions.html"],
 ".) Or, more succently, "
}], "Text",
 CellChangeTimes->{{3.5378680332285767`*^9, 3.537868038124452*^9}, {
  3.5378681256946087`*^9, 3.5378681557864227`*^9}, {3.537875801002449*^9, 
  3.537875801006778*^9}, {3.537876699311883*^9, 3.537876699321718*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Max", "[", 
    RowBox[{"#", ",", "0"}], "]"}], "&"}], "/@", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Accumulate", "[", 
     RowBox[{"p", "\[LeftDoubleBracket]", 
      StyleBox[
       RowBox[{"{", 
        RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "Input"], 
      "\[RightDoubleBracket]"}], "]"}], "-", 
    RowBox[{"d", "\[LeftDoubleBracket]", 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "Input"], 
     "\[RightDoubleBracket]"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.537546725151717*^9, 3.5375467353652477`*^9}, {
   3.537546772300199*^9, 3.53754689482181*^9}, {3.537546980543285*^9, 
   3.537546986766694*^9}, {3.537706279830702*^9, 3.537706283984008*^9}, {
   3.537868088098279*^9, 3.537868096301807*^9}, 3.537875801007227*^9, 
   3.537876699322618*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "6", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{{3.5378680916652393`*^9, 3.5378680966520777`*^9}, 
   3.537875801007428*^9, 3.537876699323065*^9}]
}, Open  ]],

Cell["\<\
In a non-functional language, this would have required a for-loop and several \
lines of code. In a functional language, it naturally fits into a single \
line. Getting the total tardiness adds no more complexity:\
\>", "Text",
 CellChangeTimes->{{3.5378681612874804`*^9, 3.5378682225525827`*^9}, {
   3.53787400110528*^9, 3.5378740054654713`*^9}, 3.537875801007503*^9, 
   3.537876699323194*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.537868230043086*^9, 3.5378682320029297`*^9}, 
   3.53787580100767*^9, 3.537876699323509*^9}],

Cell[BoxData["12"], "Output",
 CellChangeTimes->{3.5378682324019127`*^9, 3.537875801007835*^9, 
  3.537876699323799*^9}]
}, Open  ]],

Cell[TextData[{
 "since ",
 StyleBox["%", "Input"],
 " returns the last line evaluated. "
}], "Text",
 CellChangeTimes->{{3.537868235812212*^9, 3.53786825986021*^9}, {
   3.537874180964933*^9, 3.5378741815554667`*^9}, 3.5378758010078993`*^9, 
   3.5378766993239117`*^9}],

Cell[TextData[{
 "This is only a simple example of a functional operation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". Expressions can become much more complex. All my ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " code is littered with functional expressions, but rarely will you see a \
for-loop or a while-loop in my code. And I like it that way."
}], "Text",
 CellChangeTimes->{{3.537868279755517*^9, 3.537868337435055*^9}, {
   3.537869059383984*^9, 3.537869059392905*^9}, 3.537875801007957*^9, 
   3.537876699324003*^9}],

Cell[TextData[{
 "Oh, and if you want to parallelize these operations: ",
 ButtonBox["not a problem",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{
     "products", "mathematica", "newin7", "content", 
      "BuiltInParallelComputing"}, CharacterEncoding -> "UTF-8"], None}],
 "."
}], "Text",
 CellChangeTimes->{{3.537869059799102*^9, 3.5378690910928917`*^9}, 
   3.537875801008012*^9, 3.537876699324091*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["3. Optimization", "Section",
 CellChangeTimes->{{3.537815966646228*^9, 3.5378159728729258`*^9}, 
   3.5378758010080976`*^9, 3.537876699324176*^9}],

Cell[TextData[{
 "As a student of operations research, I spend a lot of time solving \
optimization problems. Solving optimization problems of many flavors is built \
right into ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". Solving linear programs given the matrices is easy with the ",
 StyleBox["LinearProgramming", "Input"],
 " function. Because most of the problems I\[CloseCurlyQuote]ve solved up to \
this point have been \[OpenCurlyDoubleQuote]toy\[CloseCurlyDoubleQuote] \
problems for class, I can\[CloseCurlyQuote]t attest to Mathematica\
\[CloseCurlyQuote]s ability to handle large scale problems, but they ",
 ButtonBox["claim",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/tutorial/\
ConstrainedOptimizationLinearProgramming.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/tutorial/\
ConstrainedOptimizationLinearProgramming.html"],
 " to be able to handle large problems. Mathematica\[CloseCurlyQuote]s ",
 StyleBox["ExampleData", "Input"],
 " function gives easy access to many data sets, including ",
 ButtonBox["NetLib.org",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.netlib.org/lp/data/readme"], None},
  ButtonNote->"http://www.netlib.org/lp/data/readme"],
 "\[CloseCurlyQuote]s LP problems. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " could solve this problem with 6072 rows and 12230 columns in 60 seconds on \
my 11-inch Macbook Air. "
}], "Text",
 CellChangeTimes->{{3.537869125095047*^9, 3.53786920954235*^9}, {
   3.537874200964196*^9, 3.537874203943075*^9}, 3.537875801008164*^9, 
   3.537876699324272*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Timing", "[", 
   RowBox[{"LinearProgramming", "@@", "\[IndentingNewLine]", 
    RowBox[{"ExampleData", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<LinearProgramming\>\"", ",", "\"\<dfl001\>\""}], "}"}], 
     "]"}]}], "]"}], "\[LeftDoubleBracket]", "1", 
  "\[RightDoubleBracket]"}]], "Input",
 CellChangeTimes->{{3.537868524631195*^9, 3.537868579106763*^9}, {
   3.537868622676519*^9, 3.537868706616774*^9}, {3.537868743744791*^9, 
   3.537868746557722*^9}, 3.537875801008424*^9, 3.537876598126499*^9, 
   3.537876699324741*^9}],

Cell[BoxData["61.14013800000001`"], "Output",
 CellChangeTimes->{{3.537868544254249*^9, 3.5378685794431877`*^9}, {
   3.5378686231785994`*^9, 3.537868638332324*^9}, 3.5378686734274187`*^9, 
   3.537868731664166*^9, 3.537868773739032*^9, 3.537875801009076*^9, 
   3.537876699325077*^9}]
}, Open  ]],

Cell[TextData[{
 "The built in solver certainly isn\[CloseCurlyQuote]t as robust as CPLEX or \
other commercial solver, but it does, at least, provide ",
 ButtonBox["several solution methods",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/tutorial/\
ConstrainedOptimizationLinearProgramming.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/tutorial/\
ConstrainedOptimizationLinearProgramming.html"],
 ". "
}], "Text",
 CellChangeTimes->{
  3.537874227520451*^9, 3.537874260396405*^9, {3.53787429630646*^9, 
   3.53787435934697*^9}, 3.5378758010091953`*^9, 3.537876699325189*^9}],

Cell[TextData[{
 "I most often find myself using the ",
 StyleBox["Minimize", "Input"],
 " and ",
 StyleBox["Maximize", "Input"],
 " functions with explicit constraints:"
}], "Text",
 CellChangeTimes->{{3.537869245270299*^9, 3.5378692662845573`*^9}, 
   3.5378758010092583`*^9, 3.537876699325284*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Minimize", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{".5", "c"}], "+", 
      RowBox[{".5", "o"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"172", "c"}], "+", 
        RowBox[{"1742", "o"}]}], "\[GreaterEqual]", "2000"}], "&&", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{".839", "c"}], "+", 
        RowBox[{"25", "o"}]}], "\[LessEqual]", "40"}], "&&", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{".019", "c"}], "+", 
        RowBox[{".015", "o"}]}], "\[GreaterEqual]", ".06"}], "&&", 
      "\[IndentingNewLine]", 
      RowBox[{"c", "\[GreaterEqual]", "0"}], "&&", "\[IndentingNewLine]", 
      RowBox[{"o", "\[GreaterEqual]", "0"}]}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"c", ",", "o"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.535111853289715*^9, 3.535111856181664*^9}, {
   3.537869274711097*^9, 3.537869297803608*^9}, 3.5378758010095863`*^9, 
   3.537876699325759*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.6744216527950717`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"c", "\[Rule]", "2.441837604036962`"}], ",", 
     RowBox[{"o", "\[Rule]", "0.9070057015531816`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5351118497965193`*^9, 3.5351118564984303`*^9}, {
   3.537869292106587*^9, 3.537869299552556*^9}, 3.5378758010098343`*^9, 
   3.537876699326127*^9}]
}, Open  ]],

Cell[TextData[{
 "In the future, I hope to do a post on using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as a pseudo-modeling language. You can see the ",
 ButtonBox["documentation",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/guide/Optimization.html"], 
    None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/guide/Optimization.html"],
 " for a number of other optimization related functions."
}], "Text",
 CellChangeTimes->{{3.537869317785207*^9, 3.537869370086341*^9}, 
   3.537875801009914*^9, 3.537876699326275*^9}],

Cell[TextData[{
 "Recently, I\[CloseCurlyQuote]ve been working with stochastic dynamic \
programming problems (i.e. Markov decission processes). ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " offers ",
 ButtonBox["the easiest memoization I\[CloseCurlyQuote]ve ever seen in any \
language",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/tutorial/\
FunctionsThatRememberValuesTheyHaveFound.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/tutorial/\
FunctionsThatRememberValuesTheyHaveFound.html"],
 ". Combined with functional aspects, I can solve dynamic programs with \
relatively little code."
}], "Text",
 CellChangeTimes->{{3.537869371824141*^9, 3.5378694521489887`*^9}, {
   3.5378698904697027`*^9, 3.537869931740014*^9}, 3.53787580100998*^9, 
   3.5378766993263693`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["4. Graphics", "Section",
 CellChangeTimes->{{3.537815987569613*^9, 3.537816004351993*^9}, 
   3.537875801010071*^9, 3.537876699326457*^9}],

Cell[TextData[{
 "When I am doing school work, I want to be able to do complicated \
comptuations and then visualize the results quickly. Because of how tightly \
knit the native ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " graphics are built into the core language, I don\[CloseCurlyQuote]t have \
to go out of my way to do this. "
}], "Text",
 CellChangeTimes->{{3.537872449797555*^9, 3.5378725095428467`*^9}, {
   3.537872574106765*^9, 3.53787257471453*^9}, 3.537875801010144*^9, 
   3.5378766993265543`*^9}],

Cell[TextData[{
 "Last semester, I wanted to demonstrate a Monte Carlo algorithm for \
navigating a maze. Over 200 iterations, a relatively simple solver (built, of \
course, in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ") could find an optimal path through a 4 by 3 maze. for a report I was \
writing. "
}], "Text",
 CellChangeTimes->{{3.5378725749731703`*^9, 3.537872742090123*^9}, {
   3.537873051895123*^9, 3.5378730525991364`*^9}, 3.537875801010206*^9, 
   3.537876699326641*^9}],

Cell[TextData[{
 "Working straight from the output of the solver, in about twenty lines of \
code, I output a grid showing candidate solution every other iteration (the \
green cells indicate cells where the action is optimal). Followed by an ",
 StyleBox["Export", "Input"],
 " function, the graphic was ready to be included in my ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"L", 
     StyleBox[
      AdjustmentBox["A",
       BoxBaselineShift->-0.4,
       BoxMargins->{{-0.5, -0.3}, {0, 0}}],
      FontSize->10], "T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]]],
 " file. All of this without having to open another program or import any \
graphics packages. "
}], "Text",
 CellChangeTimes->{{3.5378727424094553`*^9, 3.5378727700016212`*^9}, {
  3.537872870148881*^9, 3.537872870225606*^9}, {3.5378730157029867`*^9, 
  3.5378731532438917`*^9}, {3.537875801011179*^9, 3.5378758010154543`*^9}, {
  3.537876699327124*^9, 3.537876699336123*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["5. Documentation", "Section",
 CellChangeTimes->{{3.537815987569613*^9, 3.537816018217963*^9}, {
   3.537816091152348*^9, 3.537816095762452*^9}, 3.537875801015565*^9, 
   3.537876699336273*^9}],

Cell[TextData[{
 "Wolfram has been careful to write readible and thorough documentation for \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". Though ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is not free software, it\[CloseCurlyQuote]s 10,000+ pages of documentation \
are ",
 ButtonBox["available online",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/guide/Mathematica.html"], 
    None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/guide/Mathematica.html"],
 ". Not only does the documentation for every function (usually including \
bullet points with Basic Examples, Scope, Generalizations & Extensions, \
Applictions, Properties & Relations, and Neat Examples), \
it\[CloseCurlyQuote]s full of tutorials on various aspects of the language. \
Of you read the help inside of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", the files are simply notebooks, so the code can be evaluated within the \
documentation. I think you\[CloseCurlyQuote]d be hard pressed to find a \
language with better documentation."
}], "Text",
 CellChangeTimes->{{3.537870001178022*^9, 3.5378700797049847`*^9}, {
   3.53787011218089*^9, 3.537870194595899*^9}, {3.537870314479697*^9, 
   3.537870320587061*^9}, {3.537870383501861*^9, 3.537870387516305*^9}, {
   3.537874419218773*^9, 3.5378744277425413`*^9}, 3.53787580101565*^9, 
   3.537876699336371*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["6. Naming Conventions", "Section",
 CellChangeTimes->{{3.537815987569613*^9, 3.537816018217963*^9}, {
   3.537816091152348*^9, 3.537816095762452*^9}, {3.537816213876946*^9, 
   3.5378162160036907`*^9}, 3.537875801015733*^9, 3.537876699336458*^9}],

Cell[TextData[{
 "If ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " wins one debate hands down, it\[CloseCurlyQuote]s naming conventions. By \
their own ",
 ButtonBox["standards",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/tutorial/NamingConventions.\
html"], None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/tutorial/NamingConventions.html"],
 ", \[OpenCurlyDoubleQuote]As with most Mathematica functions, the names are \
usually complete English words, fully spelled out.\[CloseCurlyDoubleQuote] If \
you know the mathematical name for something, you can probably guess the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " form. "
}], "Text",
 CellChangeTimes->{{3.5378704355381527`*^9, 3.53787052994416*^9}, 
   3.537875801015791*^9, 3.537876699336586*^9}],

Cell[TextData[{
 "Stephen Wolfram wrote a ",
 ButtonBox["blog post",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://blog.wolfram.com/2008/01/10/ten-thousand-hours-of-design-\
reviews/"], None},
  ButtonNote->
   "http://blog.wolfram.com/2008/01/10/ten-thousand-hours-of-design-reviews/"],
 " a few years ago on his personal role in naming ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " funtions. Perhaps not too different from his late friend Steve Jobs, \
Wolfram desires intense control of the finest details of his products."
}], "Text",
 CellChangeTimes->{{3.537870679241914*^9, 3.537870716537776*^9}, {
   3.5378708251443453`*^9, 3.537870839732976*^9}, {3.537870927455879*^9, 
   3.537870945263589*^9}, 3.53787580101586*^9, 3.53787669933667*^9}],

Cell["\<\
<blockquote>I just realized that over the course of the decade during which \
were developing Mathematica 6\[LongDash]and accelerating greatly towards the \
end\[LongDash]I spent altogether about 10,000 hours doing what we call \
\[OpenCurlyDoubleQuote]design reviews\[CloseCurlyDoubleQuote] for Mathematica \
6, trying to make all those new functions and pieces of functionality in \
Mathematica 6 be as clean and simple as possible, and all fit \
together.</blockquote>\
\>", "Text",
 CellChangeTimes->{{3.537870920177951*^9, 3.537870924520063*^9}, 
   3.537875801015921*^9, 3.537876699336752*^9}],

Cell["I think this has paid off. ", "Text",
 CellChangeTimes->{{3.5378709625515213`*^9, 3.5378709653748903`*^9}, {
   3.5378720459044847`*^9, 3.5378720480452423`*^9}, 3.53787580101598*^9, 
   3.537876699336832*^9}],

Cell["\<\
Some people would complain about a language such an enormous number of named \
expressions, but Wolfram (the man and the company) have been so careful in \
constructing it that it doesn\[CloseCurlyQuote]t feel bloated. \
\>", "Text",
 CellChangeTimes->{{3.5378720345576267`*^9, 3.537872107940258*^9}, 
   3.537874450911436*^9, 3.537875801016039*^9, 3.537876699336958*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["7. Interactivity", "Section",
 CellChangeTimes->{{3.537815987569613*^9, 3.537816018217963*^9}, {
   3.537870760525729*^9, 3.5378707624992113`*^9}, 3.537875801016108*^9, 
   3.5378766993370533`*^9}],

Cell[TextData[{
 "In version 7, Wolfram introduced interactivity into ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". The ",
 StyleBox["Manipulate", "Input"],
 " function is one I have found extremely valuable. It allows you to \
parameterize an expression and adjust the parameters while seeing results in \
real time. For example, you could use Manipulate to adjust the region over \
which a function is plotted:"
}], "Text",
 CellChangeTimes->{{3.5378709910390263`*^9, 3.537871044837631*^9}, {
   3.537871119371951*^9, 3.537871140426754*^9}, {3.537871257971377*^9, 
   3.537871258601098*^9}, 3.537875801016172*^9, 3.5378766993371477`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Plot", "[", " ", 
    RowBox[{
     RowBox[{"Sin", "[", 
      FractionBox["1", "x"], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "\[Theta]"}], ",", "\[Theta]"}], "}"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", 
     RowBox[{"\[Pi]", "/", "100"}], ",", "\[Pi]"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.537871157789653*^9, 3.537871240877523*^9}, 
   3.5378758010165443`*^9, {3.53787663406356*^9, 3.5378766354140463`*^9}, 
   3.537876699337778*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   PaneBox[
    PanelBox[
     PaneSelectorBox[{True->GridBox[{
        {
         PaneSelectorBox[{"NameField"->
          ItemBox[
           PanelBox[GridBox[{
              {"\<\"Add Bookmark\"\>", "", ""},
              {
               InputFieldBox["\"untitled\"", String,
                DefaultBaseStyle->"Manipulator",
                FieldSize->{{20, 20}, {1, 
                   DirectedInfinity[1]}}], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  FrameBox["add",
                   Background->GrayLevel[0.96],
                   BaseStyle->{FontSize -> 9},
                   FrameMargins->{{3, 3}, {0, 0}},
                   RoundingRadius->2],
                  
                  "\"Add a bookmark with the specified name for the current \
parameter settings\""],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["FEStrings", "BookmarkAdd"]], 
                  "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>Manipulate`AddBookmark[
                  Dynamic[Typeset`specs$$], 
                  Dynamic[Typeset`bookmarkMode$$], 
                  Dynamic[Typeset`bookmarkList$$], 
                  Dynamic[Typeset`name$$]],
                DefaultBaseStyle->{"Panel", Background -> None},
                Evaluator->Automatic,
                Method->"Preemptive"], 
               ItemBox[
                ButtonBox[
                 FrameBox["close",
                  Background->GrayLevel[0.96],
                  BaseStyle->{FontSize -> 9},
                  FrameMargins->{{3, 3}, {0, 0}},
                  RoundingRadius->2],
                 Appearance->None,
                 BaselinePosition->Baseline,
                 ButtonFunction:>(Typeset`bookmarkMode$$ = "Menu"),
                 DefaultBaseStyle->{"Panel", Background -> None},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                Frame->{False, 
                  GrayLevel[0, 0.2], False, False},
                StripOnInput->False]}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], {
                  Offset[1.4]}, 
                 Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
               "Rows" -> {
                 Offset[0.2], {
                  Offset[0.4]}, 
                 Offset[0.2]}, "RowsIndexed" -> {}}],
            FrameMargins->5,
            ImageMargins->5],
           Alignment->{Left, Inherited},
           StripOnInput->False], "Animator"->
          ItemBox[
           PanelBox[GridBox[{
              {"\<\"Animate Bookmarks\"\>", ""},
              {"FE`Typeset`animator$$64", 
               ItemBox[
                ButtonBox[
                 FrameBox["close",
                  Background->GrayLevel[0.96],
                  BaseStyle->{FontSize -> 9},
                  FrameMargins->{{3, 3}, {0, 0}},
                  RoundingRadius->2],
                 Appearance->None,
                 BaselinePosition->Baseline,
                 
                 ButtonFunction:>(Unset[Typeset`animator$$]; 
                  Unset[Typeset`animvar$$]; Typeset`bookmarkMode$$ = "Menu"),
                 DefaultBaseStyle->{"Panel", Background -> None},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                Frame->{False, 
                  GrayLevel[0, 0.2], False, False},
                StripOnInput->False]}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], {
                  Offset[1.4]}, 
                 Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
               "Rows" -> {
                 Offset[0.2], {
                  Offset[0.4]}, 
                 Offset[0.2]}, "RowsIndexed" -> {}}],
            FrameMargins->5,
            ImageMargins->5],
           Alignment->{Left, Inherited},
           StripOnInput->False], "Autorun"->
          ItemBox[
           PanelBox[GridBox[{
              {"\<\"Autorun\"\>", ""},
              {"FE`Typeset`animator$$64", 
               ItemBox[
                ButtonBox[
                 FrameBox["close",
                  Background->GrayLevel[0.96],
                  BaseStyle->{FontSize -> 9},
                  FrameMargins->{{3, 3}, {0, 0}},
                  RoundingRadius->2],
                 Appearance->None,
                 BaselinePosition->Baseline,
                 
                 ButtonFunction:>(Unset[Typeset`animator$$]; 
                  Unset[Typeset`animvar$$]; Typeset`bookmarkMode$$ = "Menu"),
                 DefaultBaseStyle->{"Panel", Background -> None},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                Frame->{False, 
                  GrayLevel[0, 0.2], False, False},
                StripOnInput->False]}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], {
                  Offset[1.4]}, 
                 Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
               "Rows" -> {
                 Offset[0.2], {
                  Offset[0.4]}, 
                 Offset[0.2]}, "RowsIndexed" -> {}}],
            FrameMargins->5,
            ImageMargins->5],
           Alignment->{Left, Inherited},
           StripOnInput->False], "Menu"->""}, "Menu",
          FrameMargins->0,
          ImageSize->Automatic], 
         StyleBox[
          
          PaneSelectorBox[{"NameField"->"", "Animator"->"", "Autorun"->"", 
           "Menu"->
           ActionMenuBox[
            TagBox[
             TooltipBox[
              GraphicsBox[{
                {GrayLevel[0.706], DiskBox[{0, 0}]}, 
                {GrayLevel[0.945], AbsoluteThickness[2], 
                 LineBox[{{-0.5, 0}, {0.5, 0}}], 
                 LineBox[{{0, -0.5}, {0, 0.5}}]}},
               ImageSize->12],
              "\"Bookmarks/Autorun\""],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "FEStrings", "ManipulateBookmarksAutorun"]], 
              "Tooltip"]& ], {"\<\"Hide Controls\"\>":>(FE`Typeset`show$$64 = 
            False), Delimiter, "\<\"Paste Snapshot\"\>":>
            Manipulate`PasteSnapshot[
             Hold[FE`Typeset`specs$$64], 
             Hold[
              Plot[
               Sin[
               1/$CellContext`x], {$CellContext`x, -FE`\[Theta]$$64, 
                FE`\[Theta]$$64}, ImageSize -> 200]]], 
            Delimiter, "\<\"Add To Bookmarks\\:2026\"\>":>If[
            DeleteCases[FE`Typeset`specs$$64, {
                Blank[], Manipulate`Dump`ThisIsNotAControl}] === {}, 
             Message[
              MessageName[Manipulate, "novars"]], FE`Typeset`bookmarkMode$$64 = 
             "NameField"], Delimiter, 
            RowBox[{
             GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBgh2ImBhh4YA+hP9gPDB9GwwClfErto1Q9If2Uhs9g9x+t
4492fAChZ1w/
               "],
               ColorFunction->GrayLevel],
              BaselinePosition->Bottom,
              ImageSize->{7, 7},
              PlotRange->{{0, 7}, {0, 7}}], 
             "  ", "\<\"Initial Settings\"\>"}]:>FixedPoint[
             Function[{}, {FE`\[Theta]$$64 = Rational[1, 100] Pi}], None, 3], 
            Delimiter, "\<\"Paste Bookmarks\"\>":>Manipulate`PasteBookmarks[
             Hold[FE`Typeset`specs$$64], 
             FE`Typeset`bookmarkList$$64], "\<\"Animate Bookmarks\"\>":>Which[
            DeleteCases[FE`Typeset`specs$$64, {
                Blank[], Manipulate`Dump`ThisIsNotAControl}] === {}, 
             Message[
              MessageName[Manipulate, "novars"]], 
             Length[FE`Typeset`bookmarkList$$64] < 2, 
             Message[
              MessageName[Manipulate, "nobks"], 2], True, 
             FE`Typeset`animator$$64 = ToBoxes[
                Manipulate`BookmarksAnimator[
                 Hold[FE`Typeset`specs$$64], FE`Typeset`bookmarkList$$64, 
                 Dynamic[FE`Typeset`animvar$$64], Automatic, {1.5, True}]]; 
             FE`Typeset`bookmarkMode$$64 = "Animator"], 
            Delimiter, "\<\"Autorun\"\>":>If[
            DeleteCases[FE`Typeset`specs$$64, {
                Blank[], Manipulate`Dump`ThisIsNotAControl}] === {}, 
             Message[
              MessageName[Manipulate, "novars"]], 
             FE`Typeset`animator$$64 = ToBoxes[
                Manipulate`AutorunAnimator[
                 Hold[FE`Typeset`specs$$64], 
                 Dynamic[FE`Typeset`animvar$$64], {Automatic}]]; 
             FE`Typeset`bookmarkMode$$64 = "Autorun"]},
            Appearance->None,
            MenuAppearance->"Menu"]}, "Menu",
           FrameMargins->0,
           ImageSize->Automatic],
          StripOnInput->False,
          CacheGraphics->False]},
        {GridBox[{
           {
            ItemBox[
             ItemBox[
              StyleBox[GridBox[{
                 {
                  TagBox["\[Theta]",
                   HoldForm], 
                  TagBox[
                   PaneBox[
                    StyleBox[
                    StyleBox[
                    PaneSelectorBox[{False->GridBox[{
                    {
                    SliderBox[0.487, {0, 1},
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->True,
                    Enabled->Automatic,
                    Exclusions->{},
                    ImageSize->Medium], 
                    ItemBox[
                    TooltipBox[
                    TogglerBox[False, {True->
                    StyleBox[
                    
                    GraphicsBox[
                    RasterBox[{{179, 179, 179, 179, 179, 179, 179, 179, 179, 
                    179, 179, 179}, {179, 180, 180, 180, 179, 179, 179, 179, 
                    179, 179, 179, 179}, {179, 179, 180, 179, 179, 179, 179, 
                    178, 179, 179, 179, 179}, {179, 179, 180, 179, 179, 179, 
                    179, 179, 179, 179, 179, 179}, {179, 179, 179, 179, 179, 
                    179, 179, 179, 179, 179, 179, 179}, {179, 179, 248, 248, 
                    248, 248, 248, 248, 248, 248, 179, 179}, {179, 179, 248, 
                    248, 248, 248, 248, 248, 248, 248, 179, 179}, {179, 179, 
                    179, 179, 179, 179, 179, 179, 179, 179, 179, 179}, {179, 
                    180, 179, 179, 179, 179, 179, 179, 178, 179, 180, 179}, {
                    179, 180, 180, 179, 179, 179, 179, 179, 180, 180, 180, 
                    179}, {179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 
                    179, 179}, {179, 179, 179, 179, 179, 179, 179, 179, 179, 
                    179, 179, 179}}, {{0, 0}, {12, 12}}, {0, 255},
                    ColorFunction->GrayLevel],
                    BaselinePosition->Bottom,
                    ImageSize->{12, 12},
                    PlotRange->{{0, 12}, {0, 12}}],
                    Magnification->1], False->
                    StyleBox[
                    
                    GraphicsBox[
                    RasterBox[{{179, 179, 179, 179, 179, 179, 179, 179, 179, 
                    179, 179, 179}, {179, 180, 180, 180, 179, 179, 179, 179, 
                    179, 179, 179, 179}, {179, 179, 180, 179, 179, 248, 248, 
                    178, 179, 179, 179, 179}, {179, 179, 180, 179, 179, 253, 
                    248, 179, 179, 179, 179, 179}, {179, 179, 179, 179, 179, 
                    248, 248, 179, 179, 179, 179, 179}, {179, 179, 248, 248, 
                    248, 248, 248, 248, 248, 248, 179, 179}, {179, 179, 248, 
                    248, 248, 248, 248, 248, 248, 248, 179, 179}, {179, 179, 
                    179, 179, 179, 248, 248, 179, 179, 179, 179, 179}, {179, 
                    180, 179, 179, 179, 252, 248, 179, 178, 179, 180, 179}, {
                    179, 180, 180, 179, 179, 248, 248, 179, 180, 180, 180, 
                    179}, {179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 
                    179, 179}, {179, 179, 179, 179, 179, 179, 179, 179, 179, 
                    179, 179, 179}}, {{0, 0}, {12, 12}}, {0, 255},
                    ColorFunction->GrayLevel],
                    BaselinePosition->Bottom,
                    ImageSize->{12, 12},
                    PlotRange->{{0, 12}, {0, 12}}],
                    Magnification->1]},
                    Appearance->None,
                    ImageSize->Automatic],
                    "\"Show Animation Controls\""],
                    Alignment->{Left}]}
                    },
                    BaselinePosition->{{1, 1}, Axis},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.42]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], True->GridBox[{
                    {
                    SliderBox[0.487, {0, 1},
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->True,
                    Enabled->Automatic,
                    Exclusions->{},
                    ImageSize->Medium], 
                    ItemBox[
                    TooltipBox[
                    TogglerBox[False, {True->
                    StyleBox[
                    
                    GraphicsBox[
                    RasterBox[{{179, 179, 179, 179, 179, 179, 179, 179, 179, 
                    179, 179, 179}, {179, 180, 180, 180, 179, 179, 179, 179, 
                    179, 179, 179, 179}, {179, 179, 180, 179, 179, 179, 179, 
                    178, 179, 179, 179, 179}, {179, 179, 180, 179, 179, 179, 
                    179, 179, 179, 179, 179, 179}, {179, 179, 179, 179, 179, 
                    179, 179, 179, 179, 179, 179, 179}, {179, 179, 248, 248, 
                    248, 248, 248, 248, 248, 248, 179, 179}, {179, 179, 248, 
                    248, 248, 248, 248, 248, 248, 248, 179, 179}, {179, 179, 
                    179, 179, 179, 179, 179, 179, 179, 179, 179, 179}, {179, 
                    180, 179, 179, 179, 179, 179, 179, 178, 179, 180, 179}, {
                    179, 180, 180, 179, 179, 179, 179, 179, 180, 180, 180, 
                    179}, {179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 
                    179, 179}, {179, 179, 179, 179, 179, 179, 179, 179, 179, 
                    179, 179, 179}}, {{0, 0}, {12, 12}}, {0, 255},
                    ColorFunction->GrayLevel],
                    BaselinePosition->Bottom,
                    ImageSize->{12, 12},
                    PlotRange->{{0, 12}, {0, 12}}],
                    Magnification->1], False->
                    StyleBox[
                    
                    GraphicsBox[
                    RasterBox[{{179, 179, 179, 179, 179, 179, 179, 179, 179, 
                    179, 179, 179}, {179, 180, 180, 180, 179, 179, 179, 179, 
                    179, 179, 179, 179}, {179, 179, 180, 179, 179, 248, 248, 
                    178, 179, 179, 179, 179}, {179, 179, 180, 179, 179, 253, 
                    248, 179, 179, 179, 179, 179}, {179, 179, 179, 179, 179, 
                    248, 248, 179, 179, 179, 179, 179}, {179, 179, 248, 248, 
                    248, 248, 248, 248, 248, 248, 179, 179}, {179, 179, 248, 
                    248, 248, 248, 248, 248, 248, 248, 179, 179}, {179, 179, 
                    179, 179, 179, 248, 248, 179, 179, 179, 179, 179}, {179, 
                    180, 179, 179, 179, 252, 248, 179, 178, 179, 180, 179}, {
                    179, 180, 180, 179, 179, 248, 248, 179, 180, 180, 180, 
                    179}, {179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 
                    179, 179}, {179, 179, 179, 179, 179, 179, 179, 179, 179, 
                    179, 179, 179}}, {{0, 0}, {12, 12}}, {0, 255},
                    ColorFunction->GrayLevel],
                    BaselinePosition->Bottom,
                    ImageSize->{12, 12},
                    PlotRange->{{0, 12}, {0, 12}}],
                    Magnification->1]},
                    Appearance->None,
                    ImageSize->Automatic],
                    "\"Hide Animation Controls\""],
                    Alignment->{Left}]},
                    {GridBox[{
                    {
                    StyleBox[
                    InputFieldBox["1.54607`", Expression,
                    Appearance->Automatic,
                    
                    BaseStyle->{"Manipulator", FontSize :> 
                    CurrentValue[{"ControlsFontSize", Small}]},
                    Enabled->Automatic,
                    ImageSize->{60, Small}],
                    ShowContents->True], 
                    AnimatorBox[0.051828395843585895`, {0, 1},
                    AnimationDirection->Forward,
                    AnimationRate->Automatic,
                    Appearance->Automatic,
                    
                    AppearanceElements->{
                    "StepLeftButton", "StepRightButton", "PlayPauseButton", 
                    "FasterSlowerButtons", "DirectionButton"},
                    Enabled->Automatic,
                    Exclusions->{},
                    ImageSize->Medium,
                    PausedTime->Automatic]}
                    },
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Center}}, "RowsIndexed" -> {}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{All}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{0}}, "RowsIndexed" -> {}},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.77]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[SpanFromLeft]"}
                    },
                    BaselinePosition->{{1, 1}, Axis},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{All}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{0.1}}, "RowsIndexed" -> {}},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.42]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {
                    Offset[0.2], 
                    Offset[0.16], {
                    Offset[0.]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}]}, False,
                    BaselinePosition->Baseline,
                    ImageSize->Automatic],
                    Deployed->True,
                    TooltipBoxOptions->{TooltipDelay->Automatic}],
                    DynamicUpdating->True],
                    BaselinePosition->Baseline,
                    ImageMargins->0],
                   Manipulate`InterpretManipulator[
                    Dynamic[
                    
                    BoxForm`RemapVariable[$CellContext`\[Theta]$$, {
                    Rational[1, 100] Pi, Pi}], 
                    BoxForm`RemapValue[#, $CellContext`\[Theta]$$, {
                    Rational[1, 100] Pi, Pi}]& ], {0, 1}, {
                    AutoAction -> False}]]}
                },
                AutoDelete->False,
                
                GridBoxAlignment->{
                 "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "ManipulateLabel",
               StripOnInput->False],
              Alignment->{Automatic, Inherited},
              StripOnInput->False],
             Background->None,
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              StyleBox[
               PaneBox[
                TagBox[
                 GraphicsBox[{{}, {}, 
                   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwtm3dcjv/3x6VIIWSFFJWGkerToOEklBKaGooK2WkpaaqQlURbu2hrEtJp
72jvdc/2fSXaqt/1fTx+f92P5+O67uu9znmd13nc97XX6p7etZUrVqzQYV+x
4n+fnyjXR/MKZvFVkER27Wka9rH3ezbnz2KB2Y/5K2douE70wpbfubOYJ7+N
8u8sDW/dOqlyMH0WRXrKnkrp01D0z57XcZGz6NjedjzanIZRHF0yrz1Inh7w
D7en4Usx7Yc3VGeRbanxB1ckDW/cleLaVTaDprHPVrT8oaFy0e3u4M/TeEGB
q3D/VzrGaR2eYH2bQp4p5+6L7gx0UK4ukS/7i1a+HEGPNZl4aapVMyj/D0pt
0v5bIzuIPYxbmxsKJzHBvHVX5O4hvB9p/2Zv5m9cjk+PkBUfxgcFOvVWHybQ
ZsX19cZKI7hT1CZkhTmBK/ZtuF9yahQfWu5ZvHFiHLWd5Tc+uzOGS2tpg8/O
jqKI+YmB0+7jaPRY79xzy2G8t8J1wM2FhU6dr1f9ZzKMhvZO65+6s/DdofqC
bp1hLM/QjvZ/xMKGVo0Dh1SHsWve6VfQMxaeFlVZ0yAwjP4za+/5hLFQsVKs
ZGvPEJ7dHdLSnM9CAa5FudgLQ0jxmlBcPcVCZXPFcc1zQ8g1bMqWOstC0yzn
hMlTQzgko/T3zD8WhphM8p6UG0IT2/My3uwEbkwZJJibh/Db8cafhZsIXHmm
Kflg4yD2FnsdsDlEIPPlx935Zwaxs2+uVduSwGKhuc/EiUGclKPQ9l8l8H2+
lo6Y8iBeOLZSnuM6gbr0ce/gg4OoV/7CKekOgQVKskOO6wfRvsB442dnAt+O
FGVL/yLP4f7xV10vCbTx4tW+WcnEnTrx/6xfE3h621VGDDIxWPMDdfwNgUvH
Ofk2ZjIxw+By90gwgbfCzrqzApgYPzswHR1DoOrpLo1UPSbK5OkfGskmcFff
AQpVi4mJ6vy62/MInHZwf7jzBBPFv6xhO/aFwNToPenP/mPiBKdxhfN3ArfN
WPPe2MJEI94y0YhSAn+/zE+NXsfELg3fscByAuuEuE+1czBxj+e6Hz6VBD46
l+6sPsXAejZZJZ1aAscS//SItDHwl4hKfWATgZVKp5zMfjJQ6mjAWt0WAuMa
gze8q2CgicrDGs42Ao0Wj6qxf2FgpPVR70udBJYYeH2khDBwzwhnV0Y/gZEj
jao7AhhINywQOEwh8IGXcJeOHwNLua/ofKQSKJlWsa7oAQMvXSs55MkgMIx9
vX2UCQNDeqwzakYITDu8slhSl4EJj2fchcYILLo4swFPM3Dw1c2ttuMEDuVQ
0vsVGPgf+4X/xggC//W3/bt3mIEUkVHfnb8J3LCu7swKMQZumQiSPTZJoPzV
z8N7tjHQxuH78Wt/CdQKSD2StZ6BO59a3LgxReClgpinx1cx0LPRxtNimsDH
W17ss/pLR6O2izyHZwkMVfVynBylo8WU5dlVc+T87twv9abRUbVfYG0DyS1l
ly3jm+j44pm0v9oCOb8Jg8z/augoYh3KN0LyAr/WcmkxHdVWtac+/kcgjyac
MyDznHNljcTWRQKF7stG0jPpKMm9xjGUZPlYiTHHJDo+PEK5vWGJnG+9gNKq
GDpG3b006ULypbnNz4NC6Pjuo+pQO8l2+7g6972mo4PRCkmJZQJ9dZfEPj+h
Y2ZeXfxdkkPd/zipe9CxYssLiUSS05KHytvu01Ffpi3qF8lFrb1brt+lY8iT
ReoYyS1szVdmrtJRJ5Cj9R/Jg4eqsp+a0XHFgTj9ZZLnTX6w8RmQ6y0Hlb8k
8zzJ1kk6Q0dpnL3XTbJQ9sfoIyfo2JUQVp1Lslzfe1aVIh2/PYgW8yL5NHeg
iokMHU9Ny19XIdlM/unLYQk63m5RujZGrsfWyq3bZS8dRVcfWXpJsq+/3X7u
HeT+zVnxCJIc+s3aJXwjHR80x9jFkfuVyrxYtX8NHb+mP2LfTnIhr+7278s0
LKlXjXYj97vpmLr1mRkaDvSWCjaT58G8pZTXzaLhH6HwyztJng+W4rjDJHU7
c+GI3jy5ntJ9+v96aZgUUfX4IXm+e4mdcS9bafh8v5/gWzIeTmusUk0vo2Ga
mVLUOzJezBzm/VUKSJ3f81DWnYyne9FEb30ODT/sVn1oSMZb8EynKyuOfP6Z
ZfsWMj5ThH/VeIST47ddbHk4Qc73fNmODYE0vBTEobaRjGfGx4wvhx/RcG81
NZyTjP/Z5vjVRQ9oqL73gfRNMj/WrQgz1LGl4cOP2w98HSJQ1tjnj+1lGjKO
EGHCZD55rzE+nK1CQ6EnPG929xLYOKj076YcDaeIy+0zXQTuqRSs3nuIhkZh
1+qwgxz/8aDVG37y+as28/KR+T6/0jnYdoGKSWnmQoxqAjWpplfE/1BxXuDu
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
yp3m+bMQfukNf84ZGvz/+07w/+87wf8BiEKxWQ==
                    "]]}},
                  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
                  Axes->True,
                  AxesOrigin->{0, 0},
                  ImageSize->200,
                  
                  PlotRange->{{-1.5460719926111448`, 
                   1.5460719926111448`}, {-0.9999996789423165, 
                   0.9999999976224366}},
                  PlotRangeClipping->True,
                  PlotRangePadding->{
                    Scaled[0.02], 
                    Scaled[0.02]}],
                 Identity,
                 Editable->True,
                 Selectable->True],
                ImageMargins->10],
               Deployed->False,
               StripOnInput->False,
               ScriptLevel->0,
               GraphicsBoxOptions->{PreserveImageOptions->True},
               Graphics3DBoxOptions->{PreserveImageOptions->True}],
              Identity,
              Editable->False,
              Selectable->False],
             Alignment->{Left, Center},
             Background->GrayLevel[1],
             Frame->1,
             FrameStyle->GrayLevel[0, 0.2],
             ItemSize->Automatic,
             StripOnInput->False]}
          },
          AutoDelete->False,
          
          GridBoxAlignment->{
           "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Top}}, 
            "RowsIndexed" -> {}},
          
          GridBoxDividers->{
           "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{False}}, "RowsIndexed" -> {}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.7], {
               Offset[0.5599999999999999]}, 
              Offset[0.7]}, "ColumnsIndexed" -> {}, "Rows" -> {
              Offset[0.4], {
               Offset[0.8]}, 
              Offset[0.4]}, "RowsIndexed" -> {}}], "\[SpanFromLeft]"}
       },
       AutoDelete->False,
       GridBoxAlignment->{
        "Columns" -> {Left, {Right}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Dynamic[
             FEPrivate`If[
              FEPrivate`SameQ[Typeset`bookmarkMode$$, "Menu"], 0, 1.]]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}], False->
      TagBox[
       TooltipBox[
        ButtonBox[GridBox[{
           {
            ItemBox[
             TagBox[
              StyleBox[
               PaneBox[
                TagBox[
                 GraphicsBox[{{}, {}, 
                   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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

                    "]]}},
                  AspectRatio->0.6180339887498948,
                  Axes->True,
                  AxesOrigin->{0, 0},
                  ImageSize->200,
                  
                  PlotRange->{{-1.5460719926111448`, 
                   1.5460719926111448`}, {-0.9999916238553826, 
                   0.9999926395890227}},
                  PlotRangeClipping->True,
                  PlotRangePadding->{
                    Scaled[0.02], 
                    Scaled[0.02]}],
                 Identity,
                 Editable->True,
                 Selectable->True],
                ImageMargins->10],
               Deployed->False,
               StripOnInput->False,
               ScriptLevel->0,
               GraphicsBoxOptions->{PreserveImageOptions->True},
               Graphics3DBoxOptions->{PreserveImageOptions->True}],
              Identity,
              Editable->False,
              Selectable->False],
             Alignment->{Left, Center},
             Background->GrayLevel[1],
             Frame->1,
             FrameStyle->GrayLevel[0, 0.2],
             ItemSize->Manipulate`Dump`$AutomaticContentSize,
             StripOnInput->False]}
          },
          AutoDelete->False,
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         Appearance->None,
         BaseStyle->{},
         ButtonFunction:>(Typeset`show$$ = True),
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        "\"Show Controls\""],
       Annotation[#, 
        Dynamic[
         FEPrivate`FrontEndResource["FEStrings", "ManipulateShow"]], 
        "Tooltip"]& ]}, True,
      ImageSize->Automatic],
     DefaultBaseStyle->{},
     FrameMargins->{{5, 5}, {5, 5}}],
    BaselinePosition->Automatic,
    ImageMargins->0], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.537871168303898*^9, 3.537871241117118*^9}, 
   3.5378758015762033`*^9, 3.537876699428945*^9}]
}, Open  ]],

Cell[TextData[{
 "A side benefit to the careful construction of the language is that \
functions with related behavior often have interchangable expression lists. \
",
 StyleBox["Manipulate", "Input"],
 " can be replaced with ",
 StyleBox["Animate", "Input"],
 " with no other changes."
}], "Text",
 CellChangeTimes->{{3.5378712619624147`*^9, 3.5378713181201067`*^9}, {
   3.5378713805424633`*^9, 3.537871398998263*^9}, 3.537875801576325*^9, 
   3.537876699429081*^9}],

Cell[BoxData[
 RowBox[{"Animate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Plot", "[", " ", 
    RowBox[{
     RowBox[{"Sin", "[", 
      FractionBox["1", "x"], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "\[Theta]"}], ",", "\[Theta]"}], "}"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", 
     RowBox[{"\[Pi]", "/", "100"}], ",", "\[Pi]"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.537871157789653*^9, 3.537871240877523*^9}, {
   3.537871334258671*^9, 3.5378713362576103`*^9}, {3.537871374983123*^9, 
   3.537871377344413*^9}, 3.537875801576735*^9, {3.537876636867387*^9, 
   3.537876638585981*^9}, 3.537876699429584*^9}],

Cell[TextData[{
 "Or ",
 StyleBox["Table", "Input"],
 " for that matter:"
}], "Text",
 CellChangeTimes->{{3.53787141631684*^9, 3.537871421328237*^9}, 
   3.537875801647581*^9, 3.537876699460176*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Plot", "[", " ", 
    RowBox[{
     RowBox[{"Sin", "[", 
      FractionBox["1", "x"], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "\[Theta]"}], ",", "\[Theta]"}], "}"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "75"}]}], "]"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", 
     RowBox[{"\[Pi]", "/", "100"}], ",", "\[Pi]"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.537871157789653*^9, 3.537871240877523*^9}, {
   3.537871334258671*^9, 3.5378713362576103`*^9}, {3.537871374983123*^9, 
   3.537871413347674*^9}, 3.537875801648122*^9, {3.537876641639398*^9, 
   3.537876662175434*^9}, 3.537876699460621*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
kKffvmoUCGT1Odf1/FraRviHusZb3GDirXO074yYduIZUNVneY+JhwnjFQ8r
dxGL3tLPj3OZuNDmpzh7WTeZvu9JuXUhEwHMwGeX1/eQut23btuWMJFgY2Wl
tV5E8lv4ieQNE2Hxoe66S/sIewf98opKJhyqD69JUxCTo18unnxWy5T9/6v+
Wr4Uk82epwNWfmbi1zl/1YjDEmJSH+L1ooUJ7XdDvbpKUjLFff86hy4mXI1C
cpuuSsm3D9utSvqYKL7R7nXqn5RUbnRbuPobE28uLYqs9qTIvfeOGmUDTFia
G+8ruU6RuPW24x2HmHgww/r16o8UOVhuMvhKjoWtYTufbvlJEee1Bn1rx7Kw
/enms/9k83hh2azPbyawMODz3sJzgCLKq6aWr5vCwtP3K8ri6inS+1zp8dv/
WHg/4URARRpFXq0YyVyvxcLNaWejt+6iyK2iH7wKXRbSkztXhI6jSLS1KNZl
PgsR5TOXnuBLiW9h84lKIxaax0tGvdGSEgfzWv+NJiwkz330r+KKhMzJf+NZ
bc5CjTLv6b9eMZFfVuzkZsvCEd+hlPrlYtJ2P8+yxp4FZ/VfhzoP95Fni24v
2LKWhTGr39TkJ4pI8p3kmR83sDAk7BJ35cv4byFbeetmFv7Mbir970UPsZ13
TrRtJwuetl658+93Ea2bYQ2f9rIgVj+qfpjZSYZ0A994+rNw4+undxcCOkjh
rK2Z3kdZMNr04LrB71bC5TvzGk+wcGpahqLTvRYSPnNl7I4IFjKV1ocXFDYR
U3Ujf5/LLLg/f2boYP+J5EwcvWBvCgtKfeqisTHlxGmHXmB5GgvFeQ5bzJ+W
kLa7q+4uzWKhL+zG9oFKQtRcLy2Ve8hCqjPxd3yZTELpE60Eb2X92GeV8V3z
BSa0G58eUy3rn3PiPX7dK9wwcSWBdSxM2xV8xSOyAjU1dHurNhYkJ5m/1lTU
YPl/053rf7GgptSg/2RdMyr2WcRhmAXldTeCw1tb4FfgWZkmz0ZPYMfoerU2
sD2SNh+dyIZBbmXvfc8OGGcWsb9MYWPlkZLvOkGdKP3bXG8/nY3osvrBlWFd
GEjU3T5lDhs1RMW8YncP4sT2wuPzZfmQVSt8V/dC38a3tcWIDYeVkxaM1RKh
6Gr0HEcTNvKTCjneXSJsbbrle8+cjddDa5Onyfz1V+PXt9Rt2ShZf6am10WM
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

       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    ImageSize->75,
    PlotRange->
     NCache[{{Rational[-1, 100] Pi, Rational[1, 100] 
        Pi}, {-0.9999999553934503, 
       0.9999995248750391}}, {{-0.031415926535897934`, 
      0.031415926535897934`}, {-0.9999999553934503, 0.9999995248750391}}],
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], 
      Scaled[0.02]}], ",", 
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
j/S3QPaKBc8rtXBGiFNiJJJA2TX7JiSNa0Fx1WDeywwCB4Sle3uf1cKs3Kdy
6TICnZSu1Dh9qAXT4pmFrc0EHrhzN08ouha+qYtyHyD9s/KlY3x9Ti1cu7PZ
1ohB4L1PgR8f19UC518lyhCbwLW5qW+3D9fCTTuFjghy/kxrq7IpnqkFrTBs
SPpL4NWpISPjVXWwdIcmz0P68++1fzRX762DNsvIoP//P+7TYV6FtGN1QAla
ebyb5DPnDknonK+DimV5d66T5w8byvMv6NcBvVTl3sV5At846m6ItqyD4KtV
Thm/CRQKtVw6/7YOVDrFWoLIeaAm7z2LFVwHUY7zNtxjBD7siOz3S6mDR5ty
ny4MEbhhOq9O5nsdWCzz63jXQWDG+pZvQ1110DjO8+JrDYHaomOJbyfroHTH
ayWbQgL/nOcMFuWsh/zR5UuUrwSGGO9437KlHj68ZRtyhBMo90ri6VOReshb
HbOnzYNA5293tL9frYcN70dHM0wJFO56rnTPrB7uVlj+qtcgsPanz/ENL+tB
TkhfK+cUgbxHy/j04+rhVvLoGd61BGaq9HJwFtQDK3fqxIdpNuqYThNxTfUQ
3D95c7qLjaERAo3Tf+rB293pwocINkKhbFHQugYwGRIcbXzFRkq35hc5gQZQ
WP3tHq8RGw9tfOPmdqkBnvJPL0sSYGO2M/WcQHgD3Hv6rqvtIwv916hHuGQ1
gB1reamzBQttfAtnx2sbALjsY08rs1AyMiAhc7YBpG+wffqIScwoOL9aWaMR
8gnxxneyk5gyndxwl7sJ1F3+S+5MGkfP59uF6nc2wd3wZoMO23E053jrIC7R
BEVpoeEn5cfxyPpb/83dbAL+mpVt8m1jmHSY18cttwkSTr7dMTzNxKviskk6
Us0wZdjYp7l7FMusLTvfyzfD+VvGsdVDDDyWG8dVcKkZ/EsvfRuLZuBGuU36
+wyb4VRCZNbpQwxsuTS5hunZDDuS2Hfd/qPjlbvh5s+ZzWD29FRFynEqXgrn
kggNaYG+SREjmcuDOB6slL8hrgU6nq+ZC2kdwPcBLmffpLXAPbt/a5ZfH8By
j9Wa9ytaQOuKc99vk36Ue7HR+iTRAqZxWfVJTr0oriuQ3a7QCjN/rL2+FHTi
5o0KMuvGW0G4NlSrPLURM9Y5lzrNtEKy0GmOvKoGVF9VqTKz1Apf+ly4lYbr
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
FQ==
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    ImageSize->75,
    PlotRange->
     NCache[{{-1 + Rational[-1, 100] Pi, 1 + 
        Rational[1, 100] Pi}, {-0.9999999521212717, 
       0.9999999925509515}}, {{-1.031415926535898, 
      1.031415926535898}, {-0.9999999521212717, 0.9999999925509515}}],
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], 
      Scaled[0.02]}], ",", 
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    ImageSize->75,
    PlotRange->
     NCache[{{-2 + Rational[-1, 100] Pi, 2 + 
        Rational[1, 100] Pi}, {-0.9999997867715538, 
       0.9999994317701572}}, {{-2.0314159265358978`, 
      2.0314159265358978`}, {-0.9999997867715538, 0.9999994317701572}}],
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], 
      Scaled[0.02]}], ",", 
   GraphicsBox[{{}, {}, 
     {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
uT0zYlqCJIzdZldc1Ar/e89F+t97Lvg//JSbJQ==
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    ImageSize->75,
    PlotRange->
     NCache[{{-3 + Rational[-1, 100] Pi, 3 + 
        Rational[1, 100] Pi}, {-0.9999995778026141, 
       0.9999977893031589}}, {{-3.0314159265358978`, 
      3.0314159265358978`}, {-0.9999995778026141, 0.9999977893031589}}],
    PlotRangeClipping->True,
    PlotRangePadding->{
      Scaled[0.02], 
      Scaled[0.02]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.537871405427948*^9, 3.5378714135663023`*^9}, 
   3.537875801699065*^9, 3.537876662665402*^9, 3.537876699504389*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["8. Continual Development", "Section",
 CellChangeTimes->{{3.537815987569613*^9, 3.537816018217963*^9}, {
   3.537870764755066*^9, 3.537870767075018*^9}, 3.5378758016992292`*^9, 
   3.537876699504533*^9}],

Cell[TextData[{
 "Thankfully, Wolfram hasn\[CloseCurlyQuote]t given up on ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". It\[CloseCurlyQuote]s been in development now for nearly 24 years. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 7 (released in November 2008) introduced interactivity features, access to \
many data sets, and built in parallel computing, among ",
 ButtonBox["other things",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolfram.com/products/mathematica/newin7/"], None},
  ButtonNote->"http://www.wolfram.com/products/mathematica/newin7/"],
 "."
}], "Text",
 CellChangeTimes->{{3.5378715344502697`*^9, 3.537871626454617*^9}, {
   3.5378716585779247`*^9, 3.537871678477922*^9}, 3.537875801699314*^9, 
   3.537876699504654*^9}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 8, released in November 2010, brought integration with Wolfram Alpha and \
free form input. I find myself using this frequently when \
I\[CloseCurlyQuote]m teaching calculus. For example:"
}], "Text",
 CellChangeTimes->{{3.5378716984939127`*^9, 3.537871760324779*^9}, {
   3.537874500281254*^9, 3.537874513612688*^9}, 3.5378758016993856`*^9, 
   3.5378766995047703`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  PaneSelectorBox[{False->
   TagBox[
    FrameBox[
     TagBox[GridBox[{
        {
         InputFieldBox["integrate x^2 from 0 to 2", String,
          Appearance->None,
          BaseStyle->{"CalculateInput"},
          ContinuousAction->True,
          Enabled->True,
          FieldSize->{{1, 40}, {1, 
             DirectedInfinity[1]}},
          TrapSelection->False], 
         ItemBox[
          ButtonBox[
           PaneSelectorBox[{True->
            TagBox[
             TooltipBox[
              GraphicsBox[
               TagBox[RasterBox[CompressedData["
1:eJxVkUFOwzAQRa22C0QPgdqeBCQukK5BStQCYkHiBKkNt6jaE3TTChatUsKa
FVdAgm2XvQGJP+NMnNiLn7HHzzN/nEEQencdIURyRh/Pn13GsZ+Oe7S5Sp+n
QZcWfdI5SScBCGxugRdaxiRpxYT0SmeaySQQCpbNRO1e7SXKWZ2r8+pzDvzs
mKnVMEld70kwg8Lhqh6mT/4A9fEInL61H6j8Hnif8P3Y8qGAEn9USlUcx8L1
rH0tL0gj4PjF3GoILEYO09TVPX4zriXd+SrGzKG1viav0/ae4fT7RcKdzz7X
ng6S3/ot4P8RWpyJ25uK+QcNjzWz
                 "], {{0, 11}, {10, 0}}, {0, 255},
                 ColorFunction->RGBColor],
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                 Magnification -> 1],
                Selectable->False],
               BaseStyle->"ImageGraphics",
               ImageSize->Magnification[1],
               ImageSizeRaw->{10, 11},
               PlotRange->{{0, 10}, {0, 11}}],
              "$Failed"],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
              "Tooltip"]& ], False->
            TagBox[
             TooltipBox[
              GraphicsBox[
               TagBox[RasterBox[CompressedData["
1:eJxtUUsKgzAQDW0XpT1Fj9IewZ5AoW4LtlC8np+luhH/4AVcCS51mjcwIZQO
POdN8jLzTC7e0/F3SqnXUX8c93MNAje8H3RxC98Pb6/JWeOkgUUiUlVVUZqm
lCQJxXHMiKKIc13XBE3XdbwmwB704HKubVvDRTeOI03TZM4AmCW16KBBSD/J
gmEYGMuysA5cPElfALFtG63rajji97/yPKcsy2ieZ94vioJrWyc+xB962Z7t
2VKXZcne7FnAP692H6Dve77rpmnMHdlzkPFW0HwBSIF9Xg==
                 "], {{0, 
                 11}, {10, 0}}, {0, 255},
                 ColorFunction->RGBColor],
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                 Magnification -> 1],
                Selectable->False],
               BaseStyle->"ImageGraphics",
               ImageSize->Magnification[1],
               ImageSizeRaw->{10, 11},
               PlotRange->{{0, 10}, {0, 11}}],
              "$Failed"],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
              "Tooltip"]& ]}, False,
            ImageSize->All],
           Appearance->None,
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; If[
              Or[
               CurrentValue["OptionKey"], 
               CurrentValue["AltKey"]], SelectionMove[
                ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
              NotebookWrite[
                ButtonNotebook[], 
                Cell[
                Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                 "TextForm"], All], Typeset`open$$ = True; 
              WolframAlphaClient`Private`extrudeFromFastParse[
               "integrate x^2 from 0 to 2", 
                Defer[
                 Integrate[Global`x^2, {Global`x, 0, 2}]], "Fast parse"]; 
              Typeset`open$$ = False]),
           Evaluator->Automatic,
           Method->"Queued"],
          Alignment->{Right, Top},
          StripOnInput->False]},
        {
         PaneBox[
          TagBox[
           TooltipBox[
            ButtonBox[
             PaneSelectorBox[{False->
              StyleBox[
               RowBox[{"Integrate", "[", 
                RowBox[{
                 RowBox[{"x", "^", "2"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"x", ",", " ", "0", ",", " ", "2"}], "}"}]}], "]"}],
               
               StripOnInput->False,
               NumberMarks->False], True->
              StyleBox[
               RowBox[{"Integrate", "[", 
                RowBox[{
                 RowBox[{"x", "^", "2"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"x", ",", " ", "0", ",", " ", "2"}], "}"}]}], "]"}],
               
               StripOnInput->False,
               ShowSyntaxStyles->False,
               NumberMarks->False,
               FontColor->RGBColor[1, 0.5, 0]]}, False,
              BaseStyle->{ShowStringCharacters -> True},
              FrameMargins->0,
              ImageSize->Automatic],
             Alignment->Left,
             Appearance->None,
             BaseStyle->{},
             ButtonFunction:>(SelectionMove[
                ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                ButtonNotebook[], 
                Cell[
                 BoxData[
                  RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"x", "^", "2"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "2"}], "}"}]}], 
                    "]"}]], "Input"], All]; SelectionMove[
                ButtonNotebook[], After, CellContents]),
             Evaluator->Automatic,
             ImageSize->Automatic,
             Method->"Preemptive"],
            "$Failed"],
           Annotation[#, 
            Dynamic[
             FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
            "Tooltip"]& ],
          AppearanceElements->{},
          BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
          ImageSize->{Automatic, {1, 100}},
          Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       FrameStyle->GrayLevel[0.85],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxDividers->{
        "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"],
     Alignment->Top,
     Background->GrayLevel[1],
     BaselinePosition->Baseline,
     FrameStyle->GrayLevel[0.85],
     ImageSize->Automatic,
     RoundingRadius->5,
     StripOnInput->False],
    EventHandlerTag[{
     "MouseEntered" :> FEPrivate`Set[WolframAlphaClient`Private`show$$, True],
       "MouseExited" :> 
      FEPrivate`Set[WolframAlphaClient`Private`show$$, False], PassEventsDown -> 
      Automatic, PassEventsUp -> True}]], True->
   TagBox[GridBox[{
      {
       TagBox[
        FrameBox[
         TagBox[GridBox[{
            {
             InputFieldBox["integrate x^2 from 0 to 2", String,
              Appearance->None,
              BaseStyle->{"CalculateInput"},
              ContinuousAction->True,
              Enabled->True,
              FieldSize->{{1, 40}, {1, 
                 DirectedInfinity[1]}},
              TrapSelection->False], 
             ItemBox[
              ButtonBox[
               PaneSelectorBox[{True->
                TagBox[
                 TooltipBox[
                  GraphicsBox[
                   TagBox[RasterBox[CompressedData["
1:eJxVkUFOwzAQRa22C0QPgdqeBCQukK5BStQCYkHiBKkNt6jaE3TTChatUsKa
FVdAgm2XvQGJP+NMnNiLn7HHzzN/nEEQencdIURyRh/Pn13GsZ+Oe7S5Sp+n
QZcWfdI5SScBCGxugRdaxiRpxYT0SmeaySQQCpbNRO1e7SXKWZ2r8+pzDvzs
mKnVMEld70kwg8Lhqh6mT/4A9fEInL61H6j8Hnif8P3Y8qGAEn9USlUcx8L1
rH0tL0gj4PjF3GoILEYO09TVPX4zriXd+SrGzKG1viav0/ae4fT7RcKdzz7X
ng6S3/ot4P8RWpyJ25uK+QcNjzWz
                    "], {{0, 11}, {10, 0}}, {0, 
                    255},
                    ColorFunction->RGBColor],
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> 1],
                    Selectable->False],
                   BaseStyle->"ImageGraphics",
                   ImageSize->Magnification[1],
                   ImageSizeRaw->{10, 11},
                   PlotRange->{{0, 10}, {0, 11}}],
                  "$Failed"],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]],
                   "Tooltip"]& ], False->
                TagBox[
                 TooltipBox[
                  GraphicsBox[
                   TagBox[RasterBox[CompressedData["
1:eJxtUUsKgzAQDW0XpT1Fj9IewZ5AoW4LtlC8np+luhH/4AVcCS51mjcwIZQO
POdN8jLzTC7e0/F3SqnXUX8c93MNAje8H3RxC98Pb6/JWeOkgUUiUlVVUZqm
lCQJxXHMiKKIc13XBE3XdbwmwB704HKubVvDRTeOI03TZM4AmCW16KBBSD/J
gmEYGMuysA5cPElfALFtG63rajji97/yPKcsy2ieZ94vioJrWyc+xB962Z7t
2VKXZcne7FnAP692H6Dve77rpmnMHdlzkPFW0HwBSIF9Xg==
                    "], {{0, 
                    11}, {10, 0}}, {0, 255},
                    ColorFunction->RGBColor],
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> 1],
                    Selectable->False],
                   BaseStyle->"ImageGraphics",
                   ImageSize->Magnification[1],
                   ImageSizeRaw->{10, 11},
                   PlotRange->{{0, 10}, {0, 11}}],
                  "$Failed"],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]],
                   "Tooltip"]& ]}, False,
                ImageSize->All],
               Appearance->None,
               ButtonFunction:>(Quiet[
                  WolframAlpha[]]; If[
                  Or[
                   CurrentValue["OptionKey"], 
                   CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                  NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                  WolframAlphaClient`Private`extrudeFromFastParse[
                   "integrate x^2 from 0 to 2", 
                    Defer[
                    Integrate[Global`x^2, {Global`x, 0, 2}]], "Fast parse"]; 
                  Typeset`open$$ = False]),
               Evaluator->Automatic,
               Method->"Queued"],
              Alignment->{Right, Top},
              StripOnInput->False]},
            {
             PaneBox[
              TagBox[
               TooltipBox[
                ButtonBox[
                 PaneSelectorBox[{False->
                  StyleBox[
                   RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"x", "^", "2"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "2"}], "}"}]}], 
                    "]"}],
                   StripOnInput->False,
                   NumberMarks->False], True->
                  StyleBox[
                   RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"x", "^", "2"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "2"}], "}"}]}], 
                    "]"}],
                   StripOnInput->False,
                   ShowSyntaxStyles->False,
                   NumberMarks->False,
                   FontColor->RGBColor[1, 0.5, 0]]}, False,
                  BaseStyle->{ShowStringCharacters -> True},
                  FrameMargins->0,
                  ImageSize->Automatic],
                 Alignment->Left,
                 Appearance->None,
                 BaseStyle->{},
                 ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"x", "^", "2"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "2"}], "}"}]}], 
                    "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                 Evaluator->Automatic,
                 ImageSize->Automatic,
                 Method->"Preemptive"],
                "$Failed"],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                "Tooltip"]& ],
              AppearanceElements->{},
              BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
              ImageSize->{Automatic, {1, 100}},
              Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           BaselinePosition->{1, 1},
           FrameStyle->GrayLevel[0.85],
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxDividers->{
            "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"],
         Alignment->Top,
         Background->Automatic,
         BaselinePosition->Baseline,
         FrameStyle->GrayLevel[0.85],
         ImageSize->Automatic,
         RoundingRadius->5,
         StripOnInput->False],
        EventHandlerTag[{
         "MouseEntered" :> 
          FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
          "MouseExited" :> 
          FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
          PassEventsDown -> Automatic, PassEventsUp -> True}]]},
      {
       InterpretationBox[
        StyleBox[GridBox[{
           {
            AnimatorBox[7, {1, 12, 1},
             AppearanceElements->{},
             DefaultDuration->1,
             ImageSize->{1, 1}], 
            GraphicsBox[GeometricTransformationBox[{
               {GrayLevel[0], Opacity[0.6], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  "]], {{{1, 
                  0}, {0, 1}}, {0, 0}}]}, 
               {GrayLevel[0], Opacity[0.5499999999999999], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  "]], {{{
                  0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {0, 
                  0}}]}, 
               {GrayLevel[0], Opacity[0.5], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  "]], {{{
                  0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {0, 
                  0}}]}, 
               {GrayLevel[0], Opacity[0.44999999999999996`], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  "]], {{{
                  0, -1}, {1, 0}}, {0, 0}}]}, 
               {GrayLevel[0], Opacity[0.39999999999999997`], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  
                  "]], {{{-0.5, -0.8660254037844386}, {
                  0.8660254037844386, -0.5}}, {0, 0}}]}, 
               {GrayLevel[0], Opacity[0.35000000000000003`], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  
                  "]], {{{-0.8660254037844386, -0.5}, {
                  0.5, -0.8660254037844386}}, {0, 0}}]}, 
               {GrayLevel[0], Opacity[0.3], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  "]], {{{-1,
                   0}, {0, -1}}, {0, 0}}]}, 
               {GrayLevel[0], Opacity[0.25], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  
                  "]], {{{-0.8660254037844386, 
                  0.5}, {-0.5, -0.8660254037844386}}, {0, 0}}]}, 
               {GrayLevel[0], Opacity[0.19999999999999998`], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  
                  "]], {{{-0.5, 
                  0.8660254037844386}, {-0.8660254037844386, -0.5}}, {0, 
                  0}}]}, 
               {GrayLevel[0], Opacity[0.15], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  "]], {{{0, 
                  1}, {-1, 0}}, {0, 0}}]}, 
               {GrayLevel[0], Opacity[0.09999999999999999], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  "]], {{{
                  0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {0, 
                  0}}]}, 
               {GrayLevel[0], Opacity[0.049999999999999996`], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  "]], {{{
                  0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}, {0, 
                  0}}]}, 
               {GrayLevel[0], Opacity[0.], 
                GeometricTransformationBox[PolygonBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf9s+aCQKyDqL7Pdzvvni3n/nUptKFi+QcVvtE
vKja9hoqL+9wxro+bd6CZ/u7Dphsvmam4ADR/2D/jMCgapMOBYfJbJMP1k64
sH9fhOPCqN0weQaGs2dAQMGhHyJvD5P/+x8E7tvD9EPNt4eZvxJivz3MfhGI
++xh7oO63x7mfhhfdJ37wyoREZh/7NfU6rEWcws7rIGaB5EXcjgLtW/OsXKR
dAdBB2aIf+wblti0rJ4r4DAV6l6jaXEW8eYCDuwxIsZqyxbaQPQLOHRC/QuT
/wPxz36Yflh4zYaavwIaniJQ+2HhDXMfLD5g7gcA8lu3pQ==
                  "]], {{{1, 
                  0}, {0, 1}}, {0, 0}}]}}, Dynamic[
              Part[$CellContext`rotationMatrix$$, $CellContext`v$$]]],
             Axes->False,
             ImageSize->Dynamic[
               FEPrivate`Switch[
               20, Tiny, 12, Small, 20, Medium, 25, Large, 40, 
                Blank[], 20]],
             PlotRange->8.5]}
          },
          AutoDelete->False,
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}}],
         AnimatorBoxOptions->{ImageSize->20}],
        Animator[Appearance -> "Necklace", ImageSize -> 20],
        BaseStyle->{Deployed -> True}]}
     },
     BaselinePosition->{1, 1},
     GridBoxAlignment->{"Columns" -> {{Left}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Column"]}, False,
   BaseStyle->{Deployed -> True},
   ImageSize->Automatic],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellChangeTimes->{3.537875801780242*^9, 3.5378766995233507`*^9}],

Cell[BoxData[
 FractionBox["8", "3"]], "Output",
 CellChangeTimes->{{3.537871810433927*^9, 3.5378718467272053`*^9}, 
   3.5378758017872057`*^9, 3.537876699530348*^9}]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 8 also brought incredible probability computations. \
What\[CloseCurlyQuote]s the probability that a standard normal random \
variable is less than a Uniform(0,1) random variable? No problem."
}], "Text",
 CellChangeTimes->{{3.537871880345365*^9, 3.5378718923000593`*^9}, {
   3.537871950213037*^9, 3.537871975959234*^9}, 3.537875801787335*^9, 
   3.53787669953047*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Probability", "[", 
  RowBox[{
   RowBox[{"x", "\[LessEqual]", "y"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Distributed]", 
      RowBox[{"NormalDistribution", "[", "]"}]}], ",", 
     RowBox[{"y", "\[Distributed]", 
      RowBox[{"UniformDistribution", "[", "]"}]}]}], "}"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.537871909447784*^9, 3.537871945847459*^9}, {
   3.537871977565773*^9, 3.537871977916133*^9}, 3.537875801787709*^9, 
   3.537876657488356*^9, 3.537876699530777*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", 
    SqrtBox[
     RowBox[{"2", " ", "\[Pi]"}]]]}], "+", 
  FractionBox["1", 
   SqrtBox[
    RowBox[{"2", " ", "\[ExponentialE]", " ", "\[Pi]"}]]], "+", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"Erf", "[", 
      FractionBox["1", 
       SqrtBox["2"]], "]"}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{{3.537871940263496*^9, 3.537871946549364*^9}, 
   3.5378719786017036`*^9, 3.537875801788815*^9, 3.5378766995315647`*^9}]
}, Open  ]],

Cell[TextData[{
 "The ",
 ButtonBox["list of things new in version 8",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolfram.com/mathematica/new-in-8/"], None},
  ButtonNote->"http://www.wolfram.com/mathematica/new-in-8/"],
 " goes on."
}], "Text",
 CellChangeTimes->{{3.537872338689294*^9, 3.537872353343198*^9}, 
   3.537875801788979*^9, 3.537876699531671*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["9. Comprehensiveness", "Section",
 CellChangeTimes->{{3.537815987569613*^9, 3.537816018217963*^9}, {
   3.537870764755066*^9, 3.537870767075018*^9}, {3.53787454639732*^9, 
   3.5378745503402233`*^9}, 3.537875801789136*^9, 3.5378766995317574`*^9}],

Cell[TextData[{
 "A feature of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " that is hard to articulate is the comprehensiveness of the features I\
\[CloseCurlyQuote]ve already mentioned plus many more. It\[CloseCurlyQuote]s \
a full featured programming language, but the core language also extends to \
the depths of applied and pure mathematics. Symbolic manipulation? Check. \
Numerical methods? Check. ",
 ButtonBox["Abstract algebra",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolfram.com/mathematica/new-in-8/group-theory-algorithms/\
"], None},
  ButtonNote->
   "http://www.wolfram.com/mathematica/new-in-8/group-theory-algorithms/"],
 "? Check. Graph theory? Statistics? Visualization? Optimization? String \
Processing? Differential equations? Computational chemistry? Calculus? \
Combinatorics? Check. Check. Check. "
}], "Text",
 CellChangeTimes->{{3.5378745533774443`*^9, 3.537874649657844*^9}, {
   3.537874720882985*^9, 3.5378748559390287`*^9}, 3.537875801789262*^9, 
   3.537876699531897*^9}],

Cell["I love it.", "Text",
 CellChangeTimes->{{3.537874856685082*^9, 3.5378748577412767`*^9}, 
   3.537875801789366*^9, 3.5378766995319777`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conclusion", "Section",
 CellChangeTimes->{{3.537815987569613*^9, 3.537816018217963*^9}, {
   3.537870764755066*^9, 3.537870767075018*^9}, {3.537874523791643*^9, 
   3.537874526764189*^9}, 3.537875801789463*^9, 3.537876699532056*^9}],

Cell[TextData[{
 "No doubt, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has it\[CloseCurlyQuote]s limitations ((I might follow with a post on that \
very point)): Worlds worst undo. Not object oriented. Closed platform. \
Expensive. No autosave. No data frame structure. "
}], "Text",
 CellChangeTimes->{{3.537874863195777*^9, 3.537874921086982*^9}, {
   3.537874992868908*^9, 3.5378750287325974`*^9}, {3.537875101144286*^9, 
   3.537875106504287*^9}, 3.537875801789563*^9, 3.537876699532136*^9}],

Cell[TextData[{
 "However, for me, it\[CloseCurlyQuote]s an invaluable tool. Last semester, I \
saw a less computer savvy fellow graduate student writing out a huge table by \
hand. I don\[CloseCurlyQuote]t recall the name of what he was doing, but it \
was something to do with measuring the distance between permutations. I told \
him I could do it for him in a single line of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". "
}], "Text",
 CellChangeTimes->{{3.537875042922583*^9, 3.537875058728878*^9}, {
   3.537875090130582*^9, 3.537875098764201*^9}, {3.537875137225359*^9, 
   3.537875145207363*^9}, {3.537875197217593*^9, 3.537875201582478*^9}, {
   3.5378753042278223`*^9, 3.537875438306312*^9}, 3.537875801789673*^9, 
   3.5378766995322523`*^9}],

Cell["\<\
In just a few minutes I wrote him the following code. It ended up taking me \
more than one line, but I wrote the code much faster than he was generating \
it by hand. (His table was actually for the 4-permutation case, so it was \
24x24 instead of 6x6.)\
\>", "Text",
 CellChangeTimes->{{3.537875472654963*^9, 3.537875531423439*^9}, {
   3.537875648444972*^9, 3.537875679980452*^9}, 3.537875801789764*^9, 
   3.5378766995323133`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Kbar", "[", 
   RowBox[{"t1_", ",", "t2_", ",", "i_", ",", "j_"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"t1", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
        "<", 
        RowBox[{
        "t1", "\[LeftDoubleBracket]", "j", "\[RightDoubleBracket]"}]}], "&&", 
       
       RowBox[{
        RowBox[{"t2", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
        "<", 
        RowBox[{
        "t2", "\[LeftDoubleBracket]", "j", "\[RightDoubleBracket]"}]}]}], 
      ")"}], "\[IndentingNewLine]", "||", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"t1", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
        ">", 
        RowBox[{
        "t1", "\[LeftDoubleBracket]", "j", "\[RightDoubleBracket]"}]}], "&&", 
       
       RowBox[{
        RowBox[{"t2", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
        ">", 
        RowBox[{
        "t2", "\[LeftDoubleBracket]", "j", "\[RightDoubleBracket]"}]}]}], 
      ")"}]}], ",", "0", ",", "1"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"K", "[", 
   RowBox[{"t1_", ",", "t2_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{"Kbar", "[", 
      RowBox[{"t1", ",", "t2", ",", 
       RowBox[{"x", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       ",", 
       RowBox[{"x", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"Permutations", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "t1", "]"}], "]"}], ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]}], "]"}], "/", 
   "2"}]}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"t", " ", 
     SuperscriptBox["q", 
      RowBox[{"K", "[", 
       RowBox[{"x", ",", "y"}], "]"}]]}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"Permutations", "[", 
       RowBox[{
        RowBox[{"Range", "[", "3", "]"}], ",", 
        RowBox[{"{", "3", "}"}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"y", ",", 
      RowBox[{"Permutations", "[", 
       RowBox[{
        RowBox[{"Range", "[", "3", "]"}], ",", 
        RowBox[{"{", "3", "}"}]}], "]"}]}], "}"}]}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.529754698850709*^9, 3.529754882376541*^9}, {
   3.5297549528551207`*^9, 3.5297549563240423`*^9}, {3.529755022164084*^9, 
   3.5297550225958147`*^9}, {3.5297551057653303`*^9, 3.529755118183958*^9}, {
   3.537875246609864*^9, 3.537875250604184*^9}, {3.537875535069311*^9, 
   3.537875607521847*^9}, 3.537875801790599*^9, 3.537876699532969*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"t", 
     RowBox[{"q", " ", "t"}], 
     RowBox[{"q", " ", "t"}], 
     RowBox[{
      SuperscriptBox["q", "2"], " ", "t"}], 
     RowBox[{
      SuperscriptBox["q", "2"], " ", "t"}], 
     RowBox[{
      SuperscriptBox["q", "3"], " ", "t"}]},
    {
     RowBox[{"q", " ", "t"}], "t", 
     RowBox[{
      SuperscriptBox["q", "2"], " ", "t"}], 
     RowBox[{"q", " ", "t"}], 
     RowBox[{
      SuperscriptBox["q", "3"], " ", "t"}], 
     RowBox[{
      SuperscriptBox["q", "2"], " ", "t"}]},
    {
     RowBox[{"q", " ", "t"}], 
     RowBox[{
      SuperscriptBox["q", "2"], " ", "t"}], "t", 
     RowBox[{
      SuperscriptBox["q", "3"], " ", "t"}], 
     RowBox[{"q", " ", "t"}], 
     RowBox[{
      SuperscriptBox["q", "2"], " ", "t"}]},
    {
     RowBox[{
      SuperscriptBox["q", "2"], " ", "t"}], 
     RowBox[{"q", " ", "t"}], 
     RowBox[{
      SuperscriptBox["q", "3"], " ", "t"}], "t", 
     RowBox[{
      SuperscriptBox["q", "2"], " ", "t"}], 
     RowBox[{"q", " ", "t"}]},
    {
     RowBox[{
      SuperscriptBox["q", "2"], " ", "t"}], 
     RowBox[{
      SuperscriptBox["q", "3"], " ", "t"}], 
     RowBox[{"q", " ", "t"}], 
     RowBox[{
      SuperscriptBox["q", "2"], " ", "t"}], "t", 
     RowBox[{"q", " ", "t"}]},
    {
     RowBox[{
      SuperscriptBox["q", "3"], " ", "t"}], 
     RowBox[{
      SuperscriptBox["q", "2"], " ", "t"}], 
     RowBox[{
      SuperscriptBox["q", "2"], " ", "t"}], 
     RowBox[{"q", " ", "t"}], 
     RowBox[{"q", " ", "t"}], "t"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.5378754614338913`*^9, {3.537875586459787*^9, 3.537875608574954*^9}, 
   3.53787580179205*^9, 3.537876699534181*^9}]
}, Open  ]],

Cell[TextData[{
 "Using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " for little things like this. It allows me to spend my time and brain power \
on the things that computers can\[CloseCurlyQuote]t handle. "
}], "Text",
 CellChangeTimes->{{3.537875684908595*^9, 3.53787574739604*^9}, 
   3.537875801792172*^9, 3.537876699534267*^9}],

Cell[TextData[{
 "I love ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". And maybe you will too."
}], "Text",
 CellChangeTimes->{{3.537875739979376*^9, 3.537875755994629*^9}, 
   3.5378758017922688`*^9, 3.5378766995343933`*^9}]
}, Open  ]]
},
ScreenStyleEnvironment->"Printout",
WindowToolbars->"EditBar",
WindowSize->{1101, 720},
WindowMargins->{{238, Automatic}, {19, Automatic}},
CellLabelAutoDelete->True,
Magnification:>FEPrivate`If[
  FEPrivate`Equal[FEPrivate`$VersionNumber, 6.], 2., 2. Inherited],
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (February 23, \
2011)",
StyleDefinitions->FrontEnd`FileName[{"Article"}, "JournalArticle.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 1355, 29, 65, "Text"],
Cell[1915, 51, 629, 12, 45, "Text"],
Cell[2547, 65, 686, 12, 85, "Text"],
Cell[3236, 79, 1068, 23, 105, "Text"],
Cell[CellGroupData[{
Cell[4329, 106, 201, 5, 61, "Section"],
Cell[CellGroupData[{
Cell[4555, 115, 831, 16, 65, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[5389, 133, 557, 15, 71, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[5949, 150, 779, 25, 67, "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[6731, 177, 719, 16, 45, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[7453, 195, 626, 10, 65, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[8082, 207, 729, 21, 45, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[8814, 230, 591, 16, 59, "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[9408, 248, 512, 8, 45, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[9923, 258, 781, 20, 90, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[10707, 280, 1035, 31, 104, "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[11745, 313, 550, 11, 45, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[12298, 326, 1063, 26, 126, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[13364, 354, 428, 11, 60, "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13841, 371, 158, 2, 61, "Section"],
Cell[14002, 375, 243, 7, 25, "Text"],
Cell[CellGroupData[{
Cell[14270, 386, 398, 9, 82, "Input"],
Cell[CellGroupData[{
Cell[14693, 399, 140, 2, 28, "Print"],
Cell[14836, 403, 137, 2, 28, "Print"]
}, Open  ]]
}, Open  ]],
Cell[15000, 409, 839, 19, 45, "Text"],
Cell[15842, 430, 894, 15, 65, "Text"],
Cell[16739, 447, 401, 12, 60, "Input"],
Cell[17143, 461, 551, 12, 65, "Text"],
Cell[CellGroupData[{
Cell[17719, 477, 345, 8, 38, "Input"],
Cell[18067, 487, 211, 4, 38, "Output"]
}, Open  ]],
Cell[18293, 494, 218, 4, 25, "Text"],
Cell[CellGroupData[{
Cell[18536, 502, 491, 12, 38, "Input"],
Cell[19030, 516, 223, 6, 38, "Output"]
}, Open  ]],
Cell[19268, 525, 304, 6, 45, "Text"],
Cell[CellGroupData[{
Cell[19597, 535, 587, 16, 38, "Input"],
Cell[20187, 553, 207, 4, 38, "Output"]
}, Open  ]],
Cell[20409, 560, 770, 21, 25, "Text"],
Cell[CellGroupData[{
Cell[21204, 585, 876, 22, 38, "Input"],
Cell[22083, 609, 211, 4, 38, "Output"]
}, Open  ]],
Cell[22309, 616, 406, 7, 45, "Text"],
Cell[CellGroupData[{
Cell[22740, 627, 173, 3, 38, "Input"],
Cell[22916, 632, 120, 2, 38, "Output"]
}, Open  ]],
Cell[23051, 637, 270, 7, 25, "Text"],
Cell[23324, 646, 548, 12, 45, "Text"],
Cell[23875, 660, 428, 11, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24340, 676, 152, 2, 61, "Section"],
Cell[24495, 680, 1646, 36, 125, "Text"],
Cell[CellGroupData[{
Cell[26166, 720, 565, 12, 60, "Input"],
Cell[26734, 734, 285, 4, 38, "Output"]
}, Open  ]],
Cell[27034, 741, 650, 15, 25, "Text"],
Cell[27687, 758, 300, 8, 25, "Text"],
Cell[CellGroupData[{
Cell[28012, 770, 1094, 31, 167, "Input"],
Cell[29109, 803, 412, 10, 38, "Output"]
}, Open  ]],
Cell[29536, 816, 596, 15, 45, "Text"],
Cell[30135, 833, 856, 20, 45, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31028, 858, 144, 2, 61, "Section"],
Cell[31175, 862, 521, 11, 45, "Text"],
Cell[31699, 875, 495, 11, 45, "Text"],
Cell[32197, 888, 1064, 25, 65, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33298, 918, 199, 3, 61, "Section"],
Cell[33500, 923, 1425, 32, 105, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34962, 960, 252, 3, 61, "Section"],
Cell[35217, 965, 840, 21, 65, "Text"],
Cell[36060, 988, 769, 17, 45, "Text"],
Cell[36832, 1007, 609, 10, 65, "Text"],
Cell[37444, 1019, 214, 3, 25, "Text"],
Cell[37661, 1024, 381, 6, 45, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38079, 1035, 203, 3, 61, "Section"],
Cell[38285, 1040, 649, 13, 65, "Text"],
Cell[CellGroupData[{
Cell[38959, 1057, 677, 17, 137, "Input"],
Cell[39639, 1076, 46476, 933, 347, "Output"]
}, Open  ]],
Cell[86130, 2012, 468, 11, 45, "Text"],
Cell[86601, 2025, 769, 18, 137, "Input"],
Cell[87373, 2045, 198, 6, 25, "Text"],
Cell[CellGroupData[{
Cell[87596, 2055, 766, 18, 137, "Input"],
Cell[88365, 2075, 106641, 1779, 96, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[195055, 3860, 209, 3, 61, "Section"],
Cell[195267, 3865, 781, 18, 45, "Text"],
Cell[196051, 3885, 438, 9, 45, "Text"],
Cell[CellGroupData[{
Cell[196514, 3898, 22721, 513, 85, "WolframAlphaShortInput"],
Cell[219238, 4413, 166, 3, 60, "Output"]
}, Open  ]],
Cell[219419, 4419, 437, 9, 45, "Text"],
Cell[CellGroupData[{
Cell[219881, 4432, 549, 13, 60, "Input"],
Cell[220433, 4447, 540, 17, 67, "Output"]
}, Open  ]],
Cell[220988, 4467, 378, 10, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221403, 4482, 252, 3, 61, "Section"],
Cell[221658, 4487, 1038, 22, 85, "Text"],
Cell[222699, 4511, 144, 2, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[222880, 4518, 239, 3, 61, "Section"],
Cell[223122, 4523, 507, 10, 45, "Text"],
Cell[223632, 4535, 762, 14, 65, "Text"],
Cell[224397, 4551, 444, 8, 45, "Text"],
Cell[CellGroupData[{
Cell[224866, 4563, 2880, 78, 178, "Input"],
Cell[227749, 4643, 2142, 71, 172, "Output"]
}, Open  ]],
Cell[229906, 4717, 342, 8, 25, "Text"],
Cell[230251, 4727, 235, 7, 25, "Text"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
